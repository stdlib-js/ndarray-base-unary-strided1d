{"version":3,"file":"index.mjs","sources":["../lib/strategy.js","../lib/increment_offsets.js","../lib/set_view_offsets.js","../lib/offsets.js","../lib/nd.js","../lib/main.js","../lib/0d.js","../lib/1d.js","../lib/2d.js","../lib/3d.js","../lib/4d.js","../lib/5d.js","../lib/6d.js","../lib/7d.js","../lib/8d.js","../lib/9d.js","../lib/10d.js","../lib/2d_blocked.js","../lib/3d_blocked.js","../lib/4d_blocked.js","../lib/5d_blocked.js","../lib/6d_blocked.js","../lib/7d_blocked.js","../lib/8d_blocked.js","../lib/9d_blocked.js","../lib/10d_blocked.js","../lib/initialize_array_views.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport iterationOrder from '@stdlib/ndarray-base-iteration-order';\nimport { assign as minmaxViewBufferIndex } from '@stdlib/ndarray-base-minmax-view-buffer-index';\nimport ndarraylike2object from '@stdlib/ndarray-base-ndarraylike2object';\nimport assign from '@stdlib/ndarray-base-assign';\nimport ndarraylike2ndarray from '@stdlib/ndarray-base-ndarraylike2ndarray';\nimport emptyLike from '@stdlib/ndarray-base-empty-like';\n\n\n// FUNCTIONS //\n\n/**\n* Returns an input ndarray.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @returns {ndarrayLike} input ndarray\n*/\nfunction identity( x ) {\n\treturn x;\n}\n\n/**\n* Broadcasts a zero-dimensional ndarray to a one-dimensional ndarray view containing a single element.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @returns {ndarrayLike} broadcasted ndarray view\n*/\nfunction broadcast( x ) {\n\t// NOTE: the following properties must be set in the exact same order as in `x` in order to ensure that the returned object has the same hidden shape as the input ndarray-like object...\n\treturn {\n\t\t'dtype': x.dtype,\n\t\t'data': x.data,\n\t\t'shape': [ 1 ],\n\t\t'strides': [ 0 ],\n\t\t'offset': x.offset,\n\t\t'order': x.order\n\t};\n}\n\n/**\n* Returns a function which returns an ndarray view in which the singleton dimensions are removed from an input ndarray having only a single non-singleton dimension.\n*\n* @private\n* @param {ndarrayLike} arr - original ndarray\n* @param {NonNegativeInteger} index - index of the non-singleton dimension\n* @returns {Function} function for returning an ndarray view\n*/\nfunction squeeze( arr, index ) {\n\tvar sh = [ arr.shape[ index ] ];\n\tvar sx = [ arr.strides[ index ] ];\n\treturn reshape;\n\n\t/**\n\t* Returns an ndarray view in which the singleton dimensions are removed from an input ndarray having only a single non-singleton dimension.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - input ndarray\n\t* @returns {ndarrayLike} a squeezed ndarray view\n\t*/\n\tfunction reshape( x ) {\n\t\t// NOTE: the following properties must be set in the exact same order as in `arr` in order to ensure that the returned object has the same hidden shape as the input ndarray-like object...\n\t\treturn {\n\t\t\t'dtype': x.dtype,\n\t\t\t'data': x.data,\n\t\t\t'shape': sh,\n\t\t\t'strides': sx,\n\t\t\t'offset': x.offset,\n\t\t\t'order': x.order\n\t\t};\n\t}\n}\n\n/**\n* Returns a function which returns a one-dimensional ndarray view of a contiguous input ndarray having more than one dimension.\n*\n* @private\n* @param {NonNegativeInteger} len - number of elements in an ndarray\n* @param {integer} iox - iteration order\n* @returns {Function} function for returning a one-dimensional ndarray view\n*/\nfunction contiguous( len, iox ) {\n\tvar xmmv;\n\tvar ind;\n\tvar sh;\n\tvar sx;\n\n\t// Resolve the index of the min/max view buffer element which is the first indexed element...\n\tif ( iox === 1 ) {\n\t\tind = 0;\n\t} else {\n\t\tind = 1;\n\t}\n\t// Initialize an array for storing the min/max view buffer elements:\n\txmmv = [ 0, 0 ]; // [ min, max ]\n\n\t// Initialize the output one-dimensional view's shape and strides:\n\tsh = [ len ];\n\tsx = [ iox ];\n\n\treturn reshape;\n\n\t/**\n\t* Returns a one-dimensional ndarray view of a contiguous input ndarray having more than one dimension.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - input ndarray\n\t* @returns {ndarrayLike} a one-dimensional ndarray view\n\t*/\n\tfunction reshape( x ) {\n\t\t// Resolve the minimum and maximum linear indices in the underlying data buffer which are accessible to the input ndarray view:\n\t\tminmaxViewBufferIndex( x.shape, x.strides, x.offset, xmmv );\n\n\t\t// NOTE: the following properties must be set in the exact same order as in `x` in order to ensure that the returned object has the same hidden shape as the input ndarray-like object...\n\t\treturn {\n\t\t\t'dtype': x.dtype,\n\t\t\t'data': x.data,\n\t\t\t'shape': sh,\n\t\t\t'strides': sx,\n\t\t\t'offset': xmmv[ ind ], // the index of the first indexed element\n\t\t\t'order': x.order\n\t\t};\n\t}\n}\n\n/**\n* Returns a function which copies an input ndarray to a contiguous ndarray workspace.\n*\n* @private\n* @param {NonNegativeInteger} len - number of elements in an ndarray\n* @param {ndarrayLike} workspace - ndarray workspace\n* @returns {Function} function which copies an input ndarray to a contiguous ndarray workspace\n*/\nfunction copyToWorkspace( len, workspace ) {\n\t// NOTE: the following properties must be set in the exact same order as in the input ndarray-like object in order to ensure that the returned object has the same hidden shape...\n\tvar view = {\n\t\t'dtype': workspace.dtype,\n\t\t'data': workspace.data,\n\t\t'shape': [ len ],\n\t\t'strides': [ 1 ],\n\t\t'offset': workspace.offset,\n\t\t'order': workspace.order\n\t};\n\treturn reshape;\n\n\t/**\n\t* Copies an input ndarray to a contiguous ndarray workspace and returns a one-dimensional workspace view.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - input ndarray\n\t* @returns {ndarrayLike} one-dimensional workspace view\n\t*/\n\tfunction reshape( x ) {\n\t\tassign( [ x, workspace ] );\n\t\treturn view;\n\t}\n}\n\n/**\n* Returns a function which copies from a contiguous ndarray workspace to an input ndarray.\n*\n* @private\n* @param {ndarrayLike} workspace - ndarray workspace\n* @returns {Function} function which copies from a contiguous ndarray workspace to an input ndarray\n*/\nfunction copyFromWorkspace( workspace ) {\n\treturn copy;\n\n\t/**\n\t* Copies from a contiguous ndarray workspace to an input ndarray.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - input ndarray\n\t* @returns {ndarrayLike} input ndarray\n\t*/\n\tfunction copy( x ) {\n\t\tassign( [ workspace, x ] );\n\t\treturn x;\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Returns an object for reshaping input ndarrays which have the same data type, shape, and strides as a provided ndarray.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @param {string} x.dtype - input ndarray data type\n* @param {Collection} x.data - input ndarray data buffer\n* @param {NonNegativeIntegerArray} x.shape - input ndarray shape\n* @param {IntegerArray} x.strides - input ndarray strides\n* @param {NonNegativeInteger} x.offset - input ndarray index offset\n* @param {string} x.order - input ndarray memory layout\n* @returns {Object} object containing methods implementing a reshape strategy\n*/\nfunction strategy( x ) {\n\tvar workspace;\n\tvar ndims;\n\tvar xmmv;\n\tvar len;\n\tvar iox;\n\tvar sh;\n\tvar ns;\n\tvar i;\n\n\t// Resolve the number of array dimensions:\n\tsh = x.shape;\n\tndims = sh.length;\n\n\t// Check whether the ndarray is zero-dimensional...\n\tif ( ndims === 0 ) {\n\t\treturn {\n\t\t\t'input': broadcast,\n\t\t\t'output': identity\n\t\t};\n\t}\n\t// Check whether the ndarray is already one-dimensional...\n\tif ( ndims === 1 ) {\n\t\treturn {\n\t\t\t'input': identity,\n\t\t\t'output': identity\n\t\t};\n\t}\n\t// Determine the number of singleton dimensions...\n\tlen = 1; // number of elements\n\tns = 0;  // number of singleton dimensions\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\t// Check whether the current dimension is a singleton dimension...\n\t\tif ( sh[ i ] === 1 ) {\n\t\t\tns += 1;\n\t\t}\n\t\tlen *= sh[ i ];\n\t}\n\t// Determine whether the ndarray has only **one** non-singleton dimension (e.g., ndims=4, shape=[10,1,1,1]) so that we can simply create an ndarray view without the singleton dimensions...\n\tif ( ns === ndims-1 ) {\n\t\t// Get the index of the non-singleton dimension...\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\tif ( sh[ i ] !== 1 ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\t'input': squeeze( x, i ),\n\t\t\t'output': identity\n\t\t};\n\t}\n\tiox = iterationOrder( x.strides ); // +/-1\n\n\t// Determine whether we can avoid copying data...\n\tif ( iox !== 0 ) {\n\t\t// Determine the minimum and maximum linear indices which are accessible by the ndarray view:\n\t\txmmv = minmaxViewBufferIndex( sh, x.strides, x.offset, [ 0, 0 ] );\n\n\t\t// Determine whether we can ignore shape (and strides) and create a new one-dimensional ndarray view...\n\t\tif ( len === ( xmmv[1]-xmmv[0]+1 ) ) {\n\t\t\treturn {\n\t\t\t\t'input': contiguous( len, iox ),\n\t\t\t\t'output': identity\n\t\t\t};\n\t\t}\n\t\t// The ndarray is non-contiguous, so we cannot directly interpret as a one-dimensional ndarray...\n\n\t\t// Fall-through to copying to a workspace ndarray...\n\t}\n\t// At this point, we're dealing with a non-contiguous multi-dimensional ndarray, so we need to copy to a contiguous workspace:\n\tworkspace = ndarraylike2object( emptyLike( ndarraylike2ndarray( x ) ) );\n\treturn {\n\t\t'input': copyToWorkspace( len, workspace ),\n\t\t'output': copyFromWorkspace( workspace )\n\t};\n}\n\n\n// EXPORTS //\n\nexport default strategy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Increments index offsets according to a list of increments.\n*\n* ## Notes\n*\n* -   This function mutates the list of index offsets.\n*\n* @private\n* @param {NonNegativeIntegerArray} offsets - list of index offsets\n* @param {NonNegativeIntegerArray} inc - list of increments\n* @returns {NonNegativeIntegerArray} updated offsets\n*/\nfunction incrementOffsets( offsets, inc ) {\n\tvar i;\n\tfor ( i = 0; i < offsets.length; i++ ) {\n\t\toffsets[ i ] += inc[ i ];\n\t}\n\treturn offsets;\n}\n\n\n// EXPORTS //\n\nexport default incrementOffsets;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets view offsets according to a list of index offsets.\n*\n* ## Notes\n*\n* -   This function mutates the provides view objects.\n*\n* @private\n* @param {Array<Object>} views - list of ndarray-like objects representing ndarray views\n* @param {NonNegativeIntegerArray} offsets - list of index offsets\n* @returns {Array<Object>} updated views\n*/\nfunction setViewOffsets( views, offsets ) {\n\tvar i;\n\tfor ( i = 0; i < offsets.length; i++ ) {\n\t\tviews[ i ].offset = offsets[ i ];\n\t}\n\treturn views;\n}\n\n\n// EXPORTS //\n\nexport default setViewOffsets;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Resolves index offsets from a list of ndarray-like objects.\n*\n* @private\n* @param {ArrayLikeObject<Object>} arrays - list of ndarray-like objects\n* @returns {NonNegativeIntegerArray} list of offsets\n*/\nfunction offsets( arrays ) {\n\tvar out = [];\n\tvar i;\n\tfor ( i = 0; i < arrays.length; i++ ) {\n\t\tout.push( arrays[ i ].offset );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default offsets;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from '@stdlib/ndarray-base-numel';\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\nimport zeros from '@stdlib/array-base-zeros';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 3 ],\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unarynd( wrapper, [ x, y, initial ], views, [ 3 ], [ 4 ], [ 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ]\n*/\nfunction unarynd( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len\n\tvar len;\n\tvar iv;\n\tvar io;\n\tvar N;\n\tvar v;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tN = arrays.length;\n\n\t// Resolve the output ndarray:\n\ty = arrays[ 1 ];\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( shape );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Iterate based on the linear **view** index, regardless as to how the data is stored in memory...\n\tio = zeros( N );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tv = arrays[ j ];\n\t\t\tio[ j ] = vind2bind( shape, v.strides, iv[ j ], v.order, i, MODE );\n\t\t}\n\t\tsetViewOffsets( views, io );\n\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\tfcn( views, opts );\n\t\tstrategyY.output( y );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unarynd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ndarray2object from '@stdlib/ndarray-base-ndarraylike2object';\nimport normalizeIndices from '@stdlib/ndarray-base-to-unique-normalized-indices';\nimport indicesComplement from '@stdlib/array-base-indices-complement';\nimport takeIndexed2 from '@stdlib/array-base-take-indexed2';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport iterationOrder from '@stdlib/ndarray-base-iteration-order';\nimport numel from '@stdlib/ndarray-base-numel';\nimport join from '@stdlib/array-base-join';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport initializeViews from './initialize_array_views.js';\nimport strategy from './strategy.js';\nimport blockedunary2d from './2d_blocked.js';\nimport blockedunary3d from './3d_blocked.js';\nimport blockedunary4d from './4d_blocked.js';\nimport blockedunary5d from './5d_blocked.js';\nimport blockedunary6d from './6d_blocked.js';\nimport blockedunary7d from './7d_blocked.js';\nimport blockedunary8d from './8d_blocked.js';\nimport blockedunary9d from './9d_blocked.js';\nimport blockedunary10d from './10d_blocked.js';\nimport unary0d from './0d.js';\nimport unary1d from './1d.js';\nimport unary2d from './2d.js';\nimport unary3d from './3d.js';\nimport unary4d from './4d.js';\nimport unary5d from './5d.js';\nimport unary6d from './6d.js';\nimport unary7d from './7d.js';\nimport unary8d from './8d.js';\nimport unary9d from './9d.js';\nimport unary10d from './10d.js';\nimport unarynd from './nd.js';\n\n\n// VARIABLES //\n\nvar UNARY = [\n\tunary0d,\n\tunary1d,\n\tunary2d,\n\tunary3d,\n\tunary4d,\n\tunary5d,\n\tunary6d,\n\tunary7d,\n\tunary8d,\n\tunary9d,\n\tunary10d\n];\nvar BLOCKED_UNARY = [\n\tblockedunary2d, // 0\n\tblockedunary3d,\n\tblockedunary4d,\n\tblockedunary5d,\n\tblockedunary6d,\n\tblockedunary7d,\n\tblockedunary8d,\n\tblockedunary9d,\n\tblockedunary10d // 8\n];\nvar MAX_DIMS = UNARY.length - 1;\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array function\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n* @param {IntegerArray} dims - list of dimensions to which to apply a strided array function\n* @param {Options} [options] - function options\n* @throws {Error} arrays must have the expected number of dimensions\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide unique dimension indices\n* @throws {Error} arrays must have the same loop dimension sizes\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 3 ],\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply strided function:\n* unaryStrided1d( wrapper, [ x, y, initial ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [],\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply strided function:\n* unaryStrided1d( wrapper, [ x, y, initial ], [ 0, 1, 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 15.0, 21.0 ], [ 28.0, 36.0 ] ], [ [ 45.0, 55.0 ], [ 66.0, 78.0 ] ] ] ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 3, 2, 2 ],\n*     'strides': [ 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply strided function:\n* unaryStrided1d( wrapper, [ x, y, initial ], [] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ 1.0, 2.0 ], [ 3.0, 4.0 ] ], [ [ 5.0, 6.0 ], [ 7.0, 8.0 ] ], [ [ 9.0, 10.0 ], [ 11.0, 12.0 ] ] ]\n*/\nfunction unaryStrided1d( fcn, arrays, dims, options ) {\n\tvar strategyX;\n\tvar strategyY;\n\tvar views;\n\tvar ndims;\n\tvar ldims;\n\tvar opts;\n\tvar arr;\n\tvar tmp;\n\tvar len;\n\tvar shl;\n\tvar shc;\n\tvar shx;\n\tvar iox;\n\tvar ioy;\n\tvar scx;\n\tvar scy;\n\tvar slx;\n\tvar sly;\n\tvar ns;\n\tvar d;\n\tvar s;\n\tvar N;\n\tvar M;\n\tvar K;\n\tvar x;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tif ( arguments.length > 3 ) {\n\t\topts = options;\n\t} else {\n\t\topts = {};\n\t}\n\t// Standardize ndarray meta data...\n\tN = arrays.length;\n\tarr = [];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tarr.push( ndarray2object( arrays[ i ] ) );\n\t}\n\t// Cache references to the input and output arrays:\n\tx = arr[ 0 ];\n\ty = arr[ 1 ];\n\n\t// Resolve the number of input array dimensions:\n\tshx = x.shape;\n\tndims = shx.length;\n\n\t// Verify that we've been provided a list of unique dimension indices...\n\tM = dims.length;\n\td = normalizeIndices( dims, ndims );\n\tif ( d === null ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument contains an out-of-bounds dimension index. Value: [%s].', join( dims, ',' ) ) );\n\t}\n\td.sort();\n\tif ( d.length !== M ) {\n\t\tthrow new Error( format( 'invalid argument. Third argument must contain a list of unique dimension indices. Value: [%s].', join( dims, ',' ) ) );\n\t}\n\t// Check whether we've been provided a valid number of dimensions...\n\tif ( M > ndims ) {\n\t\tthrow new RangeError( format( 'invalid argument. Number of specified dimensions cannot exceed the number of dimensions in the input array. Number of dimensions: %d. Value: [%s].', ndims, join( dims, ',' ) ) );\n\t}\n\t// Verify that provided ancillary ndarrays have the expected number of dimensions...\n\tK = ndims - M;\n\tfor ( i = 2; i < N; i++ ) {\n\t\tif ( arr[ i ].shape.length !== K ) {\n\t\t\tthrow new Error( format( 'invalid argument. Array arguments after the first two arrays must have the same number of loop dimensions. Input array shape: [%s]. Number of loop dimensions: %d. Array shape: [%s] (index: %d).', join( shx, ',' ), K, join( arr[ i ].shape, ',' ), i ) );\n\t\t}\n\t}\n\t// Verify that the input and output arrays have the same shape...\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tif ( shx[ i ] !== arr[ 1 ].shape[ i ] ) {\n\t\t\tthrow new Error( 'invalid arguments. Input and output arrays must have the same shape.' );\n\t\t}\n\t}\n\t// Resolve the loop dimensions and associated strides:\n\tldims = indicesComplement( shx.length, d );\n\ttmp = takeIndexed2( shx, x.strides, ldims );\n\tshl = tmp[ 0 ];\n\tslx = tmp[ 1 ];\n\n\tsly = takeIndexed( y.strides, ldims );\n\n\t// Resolve the core dimensions and associated strides:\n\ttmp = takeIndexed2( shx, x.strides, d );\n\tshc = tmp[ 0 ];\n\tscx = tmp[ 1 ];\n\n\tscy = takeIndexed( y.strides, d );\n\n\t// Verify that provided ancillary arrays have the same loop dimensions...\n\tlen = 1; // number of elements\n\tns = 0;  // number of singleton dimensions\n\tfor ( i = 0; i < K; i++ ) {\n\t\ts = shl[ i ];\n\t\tfor ( j = 2; j < N; j++ ) {\n\t\t\tif ( s !== arr[ j ].shape[ i ] ) {\n\t\t\t\tthrow new Error( format( 'invalid argument. Loop dimensions must be consistent across all provided arrays. Input array shape: [%s]. Loop dimension indices: [%s]. Loop dimensions: [%s]. Array shape: [%s] (index: %d).', join( shx, ',' ), join( ldims, ',' ), join( shl, ',' ), join( arr[ j ].shape, ',' ), j ) );\n\t\t\t}\n\t\t}\n\t\t// Note that, if one of the dimensions is `0`, the length will be `0`...\n\t\tlen *= s;\n\n\t\t// Check whether the current dimension is a singleton dimension...\n\t\tif ( s === 1 ) {\n\t\t\tns += 1;\n\t\t}\n\t}\n\t// Check whether we were provided empty ndarrays...\n\tif ( len === 0 || ( shc.length && numel( shc ) === 0 ) ) {\n\t\treturn;\n\t}\n\t// Initialize ndarray-like objects for representing sub-array views...\n\tviews = [\n\t\t{\n\t\t\t'dtype': x.dtype,\n\t\t\t'data': x.data,\n\t\t\t'shape': shc,\n\t\t\t'strides': scx,\n\t\t\t'offset': x.offset,\n\t\t\t'order': x.order\n\t\t},\n\t\t{\n\t\t\t'dtype': y.dtype,\n\t\t\t'data': y.data,\n\t\t\t'shape': shc,\n\t\t\t'strides': scy,\n\t\t\t'offset': y.offset,\n\t\t\t'order': y.order\n\t\t}\n\t];\n\tinitializeViews( arr, views );\n\n\t// Determine the strategy for marshaling data to and from sub-array views of the input and output arrays before and after performing an operation:\n\tstrategyX = strategy( views[ 0 ] );\n\tstrategyY = strategy( views[ 1 ] );\n\n\t// Determine whether we can avoid iteration altogether...\n\tif ( K === 0 ) {\n\t\treturn UNARY[ K ]( fcn, arr, strategyX, strategyY, opts );\n\t}\n\t// Determine whether we only have one loop dimension and can thus readily perform one-dimensional iteration...\n\tif ( K === 1 ) {\n\t\treturn UNARY[ K ]( fcn, arr, views, shl, slx, sly, strategyX, strategyY, opts ); // eslint-disable-line max-len\n\t}\n\t// Determine whether the loop dimensions have only **one** non-singleton dimension (e.g., shape=[10,1,1,1]) so that we can treat loop iteration as being equivalent to one-dimensional iteration...\n\tif ( ns === K-1 ) {\n\t\t// Get the index of the non-singleton dimension...\n\t\tfor ( i = 0; i < K; i++ ) {\n\t\t\tif ( shl[ i ] !== 1 ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tarr[ j ].strides = [ arr[j].strides[i] ];\n\t\t}\n\t\tslx = [ slx[i] ];\n\t\tsly = [ sly[i] ];\n\t\treturn UNARY[ 1 ]( fcn, arr, views, [ shl[i] ], slx, sly, strategyX, strategyY, opts ); // eslint-disable-line max-len\n\t}\n\tiox = iterationOrder( slx ); // +/-1\n\tioy = iterationOrder( sly ); // +/-1\n\n\t// Determine whether we can avoid blocked iteration...\n\tif ( iox !== 0 && ioy !== 0 && iox === ioy && K <= MAX_DIMS ) {\n\t\t// So long as iteration for each respective array always moves in the same direction (i.e., no mixed sign strides), we can leverage cache-optimal (i.e., normal) nested loops without resorting to blocked iteration...\n\t\treturn UNARY[ K ]( fcn, arr, views, shl, slx, sly, strategyX, strategyY, opts ); // eslint-disable-line max-len\n\t}\n\t// At this point, we're either dealing with non-contiguous n-dimensional arrays, high dimensional n-dimensional arrays, and/or arrays having differing memory layouts, so our only hope is that we can still perform blocked iteration...\n\n\t// Determine whether we can perform blocked iteration...\n\tif ( K <= MAX_DIMS ) {\n\t\treturn BLOCKED_UNARY[ K-2 ]( fcn, arr, views, shl, slx, sly, strategyX, strategyY, opts ); // eslint-disable-line max-len\n\t}\n\t// Fall-through to linear view iteration without regard for how data is stored in memory (i.e., take the slow path)...\n\tunarynd( fcn, arr, views, shl, slx, sly, strategyX, strategyY, opts );\n}\n\n\n// EXPORTS //\n\nexport default unaryStrided1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 2, 2 ];\n* var ysh = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 3 ],\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unary0d( wrapper, [ x, y, initial ], strategy, strategy, {} );\n*\n* var v = y.data;\n* // returns <Float64Array>[ 1.0, 3.0, 6.0, 10.0 ]\n*/\nfunction unary0d( fcn, arrays, strategyX, strategyY, opts ) {\n\tarrays[ 0 ] = strategyX.input( arrays[ 0 ] );\n\tarrays[ 1 ] = strategyY.input( arrays[ 1 ] );\n\tfcn( arrays, opts );\n\tstrategyY.output( arrays[ 1 ] );\n}\n\n\n// EXPORTS //\n\nexport default unary0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 3 ],\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unary1d( wrapper, [ x, y, initial ], views, [ 3 ], [ 4 ], [ 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ]\n*/\nfunction unary1d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len\n\tvar dv0;\n\tvar S0;\n\tvar iv;\n\tvar i0;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray:\n\ty = arrays[ 1 ];\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tS0 = shape[ 0 ];\n\tdv0 = [\n\t\tstridesX[0],\n\t\tstridesY[0]\n\t];\n\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\tdv0.push( arrays[i].strides[0] );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Iterate over the loop dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tsetViewOffsets( views, iv );\n\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\tfcn( views, opts );\n\t\tstrategyY.output( y );\n\t\tincrementOffsets( iv, dv0 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 3 ],\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unary2d( wrapper, [ x, y, initial ], views, [ 1, 3 ], [ 12, 4 ], [ 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ]\n*/\nfunction unary2d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len\n\tvar dv0;\n\tvar dv1;\n\tvar S0;\n\tvar S1;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray:\n\ty = arrays[ 1 ];\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = shape[ 1 ];\n\t\tS1 = shape[ 0 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[1],\n\t\t\tstridesY[1]\n\t\t];\n\t\tdv1 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[0] - ( S0*stridesX[1] ),\n\t\t\tstridesY[0] - ( S0*stridesY[1] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[1] );\n\t\t\tdv1.push( sv[0] - ( S0*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = shape[ 0 ];\n\t\tS1 = shape[ 1 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[0],\n\t\t\tstridesY[0]\n\t\t];\n\t\tdv1 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[1] - ( S0*stridesX[0] ),\n\t\t\tstridesY[1] - ( S0*stridesY[0] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Iterate over the loop dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tsetViewOffsets( views, iv );\n\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\tfcn( views, opts );\n\t\t\tstrategyY.output( y );\n\t\t\tincrementOffsets( iv, dv0 );\n\t\t}\n\t\tincrementOffsets( iv, dv1 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 3 ],\n*     'strides': [ 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unary3d( wrapper, [ x, y, initial ], views, [ 1, 1, 3 ], [ 12, 12, 4 ], [ 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ]\n*/\nfunction unary3d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray:\n\ty = arrays[ 1 ];\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = shape[ 2 ];\n\t\tS1 = shape[ 1 ];\n\t\tS2 = shape[ 0 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[2],\n\t\t\tstridesY[2]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[1] - ( S0*stridesX[2] ),\n\t\t\tstridesY[1] - ( S0*stridesY[2] )\n\t\t];\n\t\tdv2 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[0] - ( S1*stridesX[1] ),\n\t\t\tstridesY[0] - ( S1*stridesY[1] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[2] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[2] ) );\n\t\t\tdv2.push( sv[0] - ( S1*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = shape[ 0 ];\n\t\tS1 = shape[ 1 ];\n\t\tS2 = shape[ 2 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[0],\n\t\t\tstridesY[0]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[1] - ( S0*stridesX[0] ),\n\t\t\tstridesY[1] - ( S0*stridesY[0] )\n\t\t];\n\t\tdv2 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[2] - ( S1*stridesX[1] ),\n\t\t\tstridesY[2] - ( S1*stridesY[1] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Iterate over the loop dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\tfcn( views, opts );\n\t\t\t\tstrategyY.output( y );\n\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv1 );\n\t\t}\n\t\tincrementOffsets( iv, dv2 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unary4d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 3 ], [ 12, 12, 12, 4 ], [ 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ]\n*/\nfunction unary4d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray:\n\ty = arrays[ 1 ];\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = shape[ 3 ];\n\t\tS1 = shape[ 2 ];\n\t\tS2 = shape[ 1 ];\n\t\tS3 = shape[ 0 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[3],\n\t\t\tstridesY[3]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[2] - ( S0*stridesX[3] ),\n\t\t\tstridesY[2] - ( S0*stridesY[3] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[1] - ( S1*stridesX[2] ),\n\t\t\tstridesY[1] - ( S1*stridesY[2] )\n\t\t];\n\t\tdv3 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[0] - ( S2*stridesX[1] ),\n\t\t\tstridesY[0] - ( S2*stridesY[1] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[3] );\n\t\t\tdv1.push( sv[2] - ( S0*sv[3] ) );\n\t\t\tdv2.push( sv[1] - ( S1*sv[2] ) );\n\t\t\tdv3.push( sv[0] - ( S2*sv[1]) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = shape[ 0 ];\n\t\tS1 = shape[ 1 ];\n\t\tS2 = shape[ 2 ];\n\t\tS3 = shape[ 3 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[0],\n\t\t\tstridesY[0]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[1] - ( S0*stridesX[0] ),\n\t\t\tstridesY[1] - ( S0*stridesY[0] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[2] - ( S1*stridesX[1] ),\n\t\t\tstridesY[2] - ( S1*stridesY[1] )\n\t\t];\n\t\tdv3 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[3] - ( S2*stridesX[2] ),\n\t\t\tstridesY[3] - ( S2*stridesY[2] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Iterate over the loop dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv2 );\n\t\t}\n\t\tincrementOffsets( iv, dv3 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unary5d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ]\n*/\nfunction unary5d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray:\n\ty = arrays[ 1 ];\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = shape[ 4 ];\n\t\tS1 = shape[ 3 ];\n\t\tS2 = shape[ 2 ];\n\t\tS3 = shape[ 1 ];\n\t\tS4 = shape[ 0 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[4],\n\t\t\tstridesY[4]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[3] - ( S0*stridesX[4] ),\n\t\t\tstridesY[3] - ( S0*stridesY[4] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[2] - ( S1*stridesX[3] ),\n\t\t\tstridesY[2] - ( S1*stridesY[3] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[1] - ( S2*stridesX[2] ),\n\t\t\tstridesY[1] - ( S2*stridesY[2] )\n\t\t];\n\t\tdv4 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[0] - ( S3*stridesX[1] ),\n\t\t\tstridesY[0] - ( S3*stridesY[1] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[4] );\n\t\t\tdv1.push( sv[3] - ( S0*sv[4] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[3] ) );\n\t\t\tdv3.push( sv[1] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[0] - ( S3*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = shape[ 0 ];\n\t\tS1 = shape[ 1 ];\n\t\tS2 = shape[ 2 ];\n\t\tS3 = shape[ 3 ];\n\t\tS4 = shape[ 4 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[0],\n\t\t\tstridesY[0]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[1] - ( S0*stridesX[0] ),\n\t\t\tstridesY[1] - ( S0*stridesY[0] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[2] - ( S1*stridesX[1] ),\n\t\t\tstridesY[2] - ( S1*stridesY[1] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[3] - ( S2*stridesX[2] ),\n\t\t\tstridesY[3] - ( S2*stridesY[2] )\n\t\t];\n\t\tdv4 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[4] - ( S3*stridesX[3] ),\n\t\t\tstridesY[4] - ( S3*stridesY[3] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Iterate over the loop dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv3 );\n\t\t}\n\t\tincrementOffsets( iv, dv4 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unary6d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ] ]\n*/\nfunction unary6d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray:\n\ty = arrays[ 1 ];\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = shape[ 5 ];\n\t\tS1 = shape[ 4 ];\n\t\tS2 = shape[ 3 ];\n\t\tS3 = shape[ 2 ];\n\t\tS4 = shape[ 1 ];\n\t\tS5 = shape[ 0 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[5],\n\t\t\tstridesY[5]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[4] - ( S0*stridesX[5] ),\n\t\t\tstridesY[4] - ( S0*stridesY[5] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[3] - ( S1*stridesX[4] ),\n\t\t\tstridesY[3] - ( S1*stridesY[4] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[2] - ( S2*stridesX[3] ),\n\t\t\tstridesY[2] - ( S2*stridesY[3] )\n\t\t];\n\t\tdv4 = [\n\t\t\tstridesX[1] - ( S3*stridesX[2] ),\n\t\t\tstridesY[1] - ( S3*stridesY[2] )\n\t\t];\n\t\tdv5 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[0] - ( S4*stridesX[1] ),\n\t\t\tstridesY[0] - ( S4*stridesY[1] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[5] );\n\t\t\tdv1.push( sv[4] - ( S0*sv[5] ) );\n\t\t\tdv2.push( sv[3] - ( S1*sv[4] ) );\n\t\t\tdv3.push( sv[2] - ( S2*sv[3] ) );\n\t\t\tdv4.push( sv[1] - ( S3*sv[2] ) );\n\t\t\tdv5.push( sv[0] - ( S4*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = shape[ 0 ];\n\t\tS1 = shape[ 1 ];\n\t\tS2 = shape[ 2 ];\n\t\tS3 = shape[ 3 ];\n\t\tS4 = shape[ 4 ];\n\t\tS5 = shape[ 5 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[0],\n\t\t\tstridesY[0]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[1] - ( S0*stridesX[0] ),\n\t\t\tstridesY[1] - ( S0*stridesY[0] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[2] - ( S1*stridesX[1] ),\n\t\t\tstridesY[2] - ( S1*stridesY[1] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[3] - ( S2*stridesX[2] ),\n\t\t\tstridesY[3] - ( S2*stridesY[2] )\n\t\t];\n\t\tdv4 = [\n\t\t\tstridesX[4] - ( S3*stridesX[3] ),\n\t\t\tstridesY[4] - ( S3*stridesY[3] )\n\t\t];\n\t\tdv5 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[5] - ( S4*stridesX[4] ),\n\t\t\tstridesY[5] - ( S4*stridesY[4] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Iterate over the loop dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv4 );\n\t\t}\n\t\tincrementOffsets( iv, dv5 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unary7d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ] ] ]\n*/\nfunction unary7d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray:\n\ty = arrays[ 1 ];\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = shape[ 6 ];\n\t\tS1 = shape[ 5 ];\n\t\tS2 = shape[ 4 ];\n\t\tS3 = shape[ 3 ];\n\t\tS4 = shape[ 2 ];\n\t\tS5 = shape[ 1 ];\n\t\tS6 = shape[ 0 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[6],\n\t\t\tstridesY[6]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[5] - ( S0*stridesX[6] ),\n\t\t\tstridesY[5] - ( S0*stridesY[6] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[4] - ( S1*stridesX[5] ),\n\t\t\tstridesY[4] - ( S1*stridesY[5] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[3] - ( S2*stridesX[4] ),\n\t\t\tstridesY[3] - ( S2*stridesY[4] )\n\t\t];\n\t\tdv4 = [\n\t\t\tstridesX[2] - ( S3*stridesX[3] ),\n\t\t\tstridesY[2] - ( S3*stridesY[3] )\n\t\t];\n\t\tdv5 = [\n\t\t\tstridesX[1] - ( S4*stridesX[2] ),\n\t\t\tstridesY[1] - ( S4*stridesY[2] )\n\t\t];\n\t\tdv6 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[0] - ( S5*stridesX[1] ),\n\t\t\tstridesY[0] - ( S5*stridesY[1] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[6] );\n\t\t\tdv1.push( sv[5] - ( S0*sv[6] ) );\n\t\t\tdv2.push( sv[4] - ( S1*sv[5] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[4] ) );\n\t\t\tdv4.push( sv[2] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[1] - ( S4*sv[2] ) );\n\t\t\tdv6.push( sv[0] - ( S5*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = shape[ 0 ];\n\t\tS1 = shape[ 1 ];\n\t\tS2 = shape[ 2 ];\n\t\tS3 = shape[ 3 ];\n\t\tS4 = shape[ 4 ];\n\t\tS5 = shape[ 5 ];\n\t\tS6 = shape[ 6 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[0],\n\t\t\tstridesY[0]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[1] - ( S0*stridesX[0] ),\n\t\t\tstridesY[1] - ( S0*stridesY[0] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[2] - ( S1*stridesX[1] ),\n\t\t\tstridesY[2] - ( S1*stridesY[1] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[3] - ( S2*stridesX[2] ),\n\t\t\tstridesY[3] - ( S2*stridesY[2] )\n\t\t];\n\t\tdv4 = [\n\t\t\tstridesX[4] - ( S3*stridesX[3] ),\n\t\t\tstridesY[4] - ( S3*stridesY[3] )\n\t\t];\n\t\tdv5 = [\n\t\t\tstridesX[5] - ( S4*stridesX[4] ),\n\t\t\tstridesY[5] - ( S4*stridesY[4] )\n\t\t];\n\t\tdv6 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[6] - ( S5*stridesX[5] ),\n\t\t\tstridesY[6] - ( S5*stridesY[5] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Iterate over the loop dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv5 );\n\t\t}\n\t\tincrementOffsets( iv, dv6 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unary8d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ] ] ] ]\n*/\nfunction unary8d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len, max-statements\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray:\n\ty = arrays[ 1 ];\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = shape[ 7 ];\n\t\tS1 = shape[ 6 ];\n\t\tS2 = shape[ 5 ];\n\t\tS3 = shape[ 4 ];\n\t\tS4 = shape[ 3 ];\n\t\tS5 = shape[ 2 ];\n\t\tS6 = shape[ 1 ];\n\t\tS7 = shape[ 0 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[7],\n\t\t\tstridesY[7]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[6] - ( S0*stridesX[7] ),\n\t\t\tstridesY[6] - ( S0*stridesY[7] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[5] - ( S1*stridesX[6] ),\n\t\t\tstridesY[5] - ( S1*stridesY[6] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[4] - ( S2*stridesX[5] ),\n\t\t\tstridesY[4] - ( S2*stridesY[5] )\n\t\t];\n\t\tdv4 = [\n\t\t\tstridesX[3] - ( S3*stridesX[4] ),\n\t\t\tstridesY[3] - ( S3*stridesY[4] )\n\t\t];\n\t\tdv5 = [\n\t\t\tstridesX[2] - ( S4*stridesX[3] ),\n\t\t\tstridesY[2] - ( S4*stridesY[3] )\n\t\t];\n\t\tdv6 = [\n\t\t\tstridesX[1] - ( S5*stridesX[2] ),\n\t\t\tstridesY[1] - ( S5*stridesY[2] )\n\t\t];\n\t\tdv7 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[0] - ( S6*stridesX[1] ),\n\t\t\tstridesY[0] - ( S6*stridesY[1] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[7] );\n\t\t\tdv1.push( sv[6] - ( S0*sv[7] ) );\n\t\t\tdv2.push( sv[5] - ( S1*sv[6] ) );\n\t\t\tdv3.push( sv[4] - ( S2*sv[5] ) );\n\t\t\tdv4.push( sv[3] - ( S3*sv[4] ) );\n\t\t\tdv5.push( sv[2] - ( S4*sv[3] ) );\n\t\t\tdv6.push( sv[1] - ( S5*sv[2] ) );\n\t\t\tdv7.push( sv[0] - ( S6*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = shape[ 0 ];\n\t\tS1 = shape[ 1 ];\n\t\tS2 = shape[ 2 ];\n\t\tS3 = shape[ 3 ];\n\t\tS4 = shape[ 4 ];\n\t\tS5 = shape[ 5 ];\n\t\tS6 = shape[ 6 ];\n\t\tS7 = shape[ 7 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[0],\n\t\t\tstridesY[0]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[1] - ( S0*stridesX[0] ),\n\t\t\tstridesY[1] - ( S0*stridesY[0] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[2] - ( S1*stridesX[1] ),\n\t\t\tstridesY[2] - ( S1*stridesY[1] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[3] - ( S2*stridesX[2] ),\n\t\t\tstridesY[3] - ( S2*stridesY[2] )\n\t\t];\n\t\tdv4 = [\n\t\t\tstridesX[4] - ( S3*stridesX[3] ),\n\t\t\tstridesY[4] - ( S3*stridesY[3] )\n\t\t];\n\t\tdv5 = [\n\t\t\tstridesX[5] - ( S4*stridesX[4] ),\n\t\t\tstridesY[5] - ( S4*stridesY[4] )\n\t\t];\n\t\tdv6 = [\n\t\t\tstridesX[6] - ( S5*stridesX[5] ),\n\t\t\tstridesY[6] - ( S5*stridesY[5] )\n\t\t];\n\t\tdv7 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[7] - ( S6*stridesX[6] ),\n\t\t\tstridesY[7] - ( S6*stridesY[6] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Iterate over the loop dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv6 );\n\t\t}\n\t\tincrementOffsets( iv, dv7 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unary9d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ] ] ] ] ]\n*/\nfunction unary9d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-statements\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray:\n\ty = arrays[ 1 ];\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = shape[ 8 ];\n\t\tS1 = shape[ 7 ];\n\t\tS2 = shape[ 6 ];\n\t\tS3 = shape[ 5 ];\n\t\tS4 = shape[ 4 ];\n\t\tS5 = shape[ 3 ];\n\t\tS6 = shape[ 2 ];\n\t\tS7 = shape[ 1 ];\n\t\tS8 = shape[ 0 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[8],\n\t\t\tstridesY[8]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[7] - ( S0*stridesX[8] ),\n\t\t\tstridesY[7] - ( S0*stridesY[8] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[6] - ( S1*stridesX[7] ),\n\t\t\tstridesY[6] - ( S1*stridesY[7] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[5] - ( S2*stridesX[6] ),\n\t\t\tstridesY[5] - ( S2*stridesY[6] )\n\t\t];\n\t\tdv4 = [\n\t\t\tstridesX[4] - ( S3*stridesX[5] ),\n\t\t\tstridesY[4] - ( S3*stridesY[5] )\n\t\t];\n\t\tdv5 = [\n\t\t\tstridesX[3] - ( S4*stridesX[4] ),\n\t\t\tstridesY[3] - ( S4*stridesY[4] )\n\t\t];\n\t\tdv6 = [\n\t\t\tstridesX[2] - ( S5*stridesX[3] ),\n\t\t\tstridesY[2] - ( S5*stridesY[3] )\n\t\t];\n\t\tdv7 = [\n\t\t\tstridesX[1] - ( S6*stridesX[2] ),\n\t\t\tstridesY[1] - ( S6*stridesY[2] )\n\t\t];\n\t\tdv8 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[0] - ( S7*stridesX[1] ),\n\t\t\tstridesY[0] - ( S7*stridesY[1] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[8] );\n\t\t\tdv1.push( sv[7] - ( S0*sv[8] ) );\n\t\t\tdv2.push( sv[6] - ( S1*sv[7] ) );\n\t\t\tdv3.push( sv[5] - ( S2*sv[6] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[5] ) );\n\t\t\tdv5.push( sv[3] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[2] - ( S5*sv[3] ) );\n\t\t\tdv7.push( sv[1] - ( S6*sv[2] ) );\n\t\t\tdv8.push( sv[0] - ( S7*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = shape[ 0 ];\n\t\tS1 = shape[ 1 ];\n\t\tS2 = shape[ 2 ];\n\t\tS3 = shape[ 3 ];\n\t\tS4 = shape[ 4 ];\n\t\tS5 = shape[ 5 ];\n\t\tS6 = shape[ 6 ];\n\t\tS7 = shape[ 7 ];\n\t\tS8 = shape[ 8 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[0],\n\t\t\tstridesY[0]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[1] - ( S0*stridesX[0] ),\n\t\t\tstridesY[1] - ( S0*stridesY[0] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[2] - ( S1*stridesX[1] ),\n\t\t\tstridesY[2] - ( S1*stridesY[1] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[3] - ( S2*stridesX[2] ),\n\t\t\tstridesY[3] - ( S2*stridesY[2] )\n\t\t];\n\t\tdv4 = [\n\t\t\tstridesX[4] - ( S3*stridesX[3] ),\n\t\t\tstridesY[4] - ( S3*stridesY[3] )\n\t\t];\n\t\tdv5 = [\n\t\t\tstridesX[5] - ( S4*stridesX[4] ),\n\t\t\tstridesY[5] - ( S4*stridesY[4] )\n\t\t];\n\t\tdv6 = [\n\t\t\tstridesX[6] - ( S5*stridesX[5] ),\n\t\t\tstridesY[6] - ( S5*stridesY[5] )\n\t\t];\n\t\tdv7 = [\n\t\t\tstridesX[7] - ( S6*stridesX[6] ),\n\t\t\tstridesY[7] - ( S6*stridesY[6] )\n\t\t];\n\t\tdv8 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[8] - ( S7*stridesX[7] ),\n\t\t\tstridesY[8] - ( S7*stridesY[7] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Iterate over the loop dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv7 );\n\t\t}\n\t\tincrementOffsets( iv, dv8 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unary10d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ] ] ] ] ] ]\n*/\nfunction unary10d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray:\n\ty = arrays[ 1 ];\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = shape[ 9 ];\n\t\tS1 = shape[ 8 ];\n\t\tS2 = shape[ 7 ];\n\t\tS3 = shape[ 6 ];\n\t\tS4 = shape[ 5 ];\n\t\tS5 = shape[ 4 ];\n\t\tS6 = shape[ 3 ];\n\t\tS7 = shape[ 2 ];\n\t\tS8 = shape[ 1 ];\n\t\tS9 = shape[ 0 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[9],\n\t\t\tstridesY[9]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[8] - ( S0*stridesX[9] ),\n\t\t\tstridesY[8] - ( S0*stridesY[9] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[7] - ( S1*stridesX[8] ),\n\t\t\tstridesY[7] - ( S1*stridesY[8] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[6] - ( S2*stridesX[7] ),\n\t\t\tstridesY[6] - ( S2*stridesY[7] )\n\t\t];\n\t\tdv4 = [\n\t\t\tstridesX[5] - ( S3*stridesX[6] ),\n\t\t\tstridesY[5] - ( S3*stridesY[6] )\n\t\t];\n\t\tdv5 = [\n\t\t\tstridesX[4] - ( S4*stridesX[5] ),\n\t\t\tstridesY[4] - ( S4*stridesY[5] )\n\t\t];\n\t\tdv6 = [\n\t\t\tstridesX[3] - ( S5*stridesX[4] ),\n\t\t\tstridesY[3] - ( S5*stridesY[4] )\n\t\t];\n\t\tdv7 = [\n\t\t\tstridesX[2] - ( S6*stridesX[3] ),\n\t\t\tstridesY[2] - ( S6*stridesY[3] )\n\t\t];\n\t\tdv8 = [\n\t\t\tstridesX[1] - ( S7*stridesX[2] ),\n\t\t\tstridesY[1] - ( S7*stridesY[2] )\n\t\t];\n\t\tdv9 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[0] - ( S8*stridesX[1] ),\n\t\t\tstridesY[0] - ( S8*stridesY[1] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[9] );\n\t\t\tdv1.push( sv[8] - ( S0*sv[9] ) );\n\t\t\tdv2.push( sv[7] - ( S1*sv[8] ) );\n\t\t\tdv3.push( sv[6] - ( S2*sv[7] ) );\n\t\t\tdv4.push( sv[5] - ( S3*sv[6] ) );\n\t\t\tdv5.push( sv[4] - ( S4*sv[5] ) );\n\t\t\tdv6.push( sv[3] - ( S5*sv[4] ) );\n\t\t\tdv7.push( sv[2] - ( S6*sv[3] ) );\n\t\t\tdv8.push( sv[1] - ( S7*sv[2] ) );\n\t\t\tdv9.push( sv[0] - ( S8*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = shape[ 0 ];\n\t\tS1 = shape[ 1 ];\n\t\tS2 = shape[ 2 ];\n\t\tS3 = shape[ 3 ];\n\t\tS4 = shape[ 4 ];\n\t\tS5 = shape[ 5 ];\n\t\tS6 = shape[ 6 ];\n\t\tS7 = shape[ 7 ];\n\t\tS8 = shape[ 8 ];\n\t\tS9 = shape[ 9 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[0],\n\t\t\tstridesY[0]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[1] - ( S0*stridesX[0] ),\n\t\t\tstridesY[1] - ( S0*stridesY[0] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[2] - ( S1*stridesX[1] ),\n\t\t\tstridesY[2] - ( S1*stridesY[1] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[3] - ( S2*stridesX[2] ),\n\t\t\tstridesY[3] - ( S2*stridesY[2] )\n\t\t];\n\t\tdv4 = [\n\t\t\tstridesX[4] - ( S3*stridesX[3] ),\n\t\t\tstridesY[4] - ( S3*stridesY[3] )\n\t\t];\n\t\tdv5 = [\n\t\t\tstridesX[5] - ( S4*stridesX[4] ),\n\t\t\tstridesY[5] - ( S4*stridesY[4] )\n\t\t];\n\t\tdv6 = [\n\t\t\tstridesX[6] - ( S5*stridesX[5] ),\n\t\t\tstridesY[6] - ( S5*stridesY[5] )\n\t\t];\n\t\tdv7 = [\n\t\t\tstridesX[7] - ( S6*stridesX[6] ),\n\t\t\tstridesY[7] - ( S6*stridesY[6] )\n\t\t];\n\t\tdv8 = [\n\t\t\tstridesX[8] - ( S7*stridesX[7] ),\n\t\t\tstridesY[8] - ( S7*stridesY[7] )\n\t\t];\n\t\tdv9 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[9] - ( S8*stridesX[8] ),\n\t\t\tstridesY[9] - ( S8*stridesY[8] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t\tdv8.push( sv[8] - ( S8*sv[8] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Iterate over the loop dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv8 );\n\t\t}\n\t\tincrementOffsets( iv, dv9 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 3 ],\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* blockedunary2d( wrapper, [ x, y, initial ], views, [ 1, 3 ], [ 12, 4 ], [ 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ]\n*/\nfunction blockedunary2d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar ov1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( shape, stridesX, stridesY );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tdv1 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov1[ k ] = ov[k] + ( j1*sv[k][1] );\n\t\t}\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t}\n\t\t\t// Iterate over the loop dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 3 ],\n*     'strides': [ 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* blockedunary3d( wrapper, [ x, y, initial ], views, [ 1, 1, 3 ], [ 12, 12, 4 ], [ 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ]\n*/\nfunction blockedunary3d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar ov1;\n\tvar ov2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( shape, stridesX, stridesY );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov2[ k ] = ov[k] + ( j2*sv[k][2] );\n\t\t}\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t}\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t}\n\t\t\t\t// Iterate over the loop dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* blockedunary4d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 3 ], [ 12, 12, 12, 4 ], [ 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ]\n*/\nfunction blockedunary4d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( shape, stridesX, stridesY );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov3[ k ] = ov[k] + ( j3*sv[k][3] );\n\t\t}\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t}\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t}\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t}\n\t\t\t\t\t// Iterate over the loop dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* blockedunary5d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ]\n*/\nfunction blockedunary5d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( shape, stridesX, stridesY );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov4[ k ] = ov[k] + ( j4*sv[k][4] );\n\t\t}\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t}\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t}\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Iterate over the loop dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* blockedunary6d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary6d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( shape, stridesX, stridesY );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov5[ k ] = ov[k] + ( j5*sv[k][5] );\n\t\t}\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t}\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t}\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Iterate over the loop dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* blockedunary7d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary7d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( shape, stridesX, stridesY );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov6[ k ] = ov[k] + ( j6*sv[k][6] );\n\t\t}\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t}\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t}\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Iterate over the loop dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* blockedunary8d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary8d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( shape, stridesX, stridesY );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov7[ k ] = ov[k] + ( j7*sv[k][7] );\n\t\t}\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t}\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t}\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Iterate over the loop dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* blockedunary9d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary9d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( shape, stridesX, stridesY );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov8[ k ] = ov[k] + ( j8*sv[k][8] );\n\t\t}\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv8 = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t}\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t}\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Iterate over the loop dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import getStride from '@stdlib/ndarray-base-stride';\n* import getOffset from '@stdlib/ndarray-base-offset';\n* import getData from '@stdlib/ndarray-base-data-buffer';\n* import numelDimension from '@stdlib/ndarray-base-numel-dimension';\n* import { ndarray as gcusum } from '@stdlib/blas-ext-base-gcusum';\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* blockedunary10d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary10d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar ov9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( shape, stridesX, stridesY );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tov9 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tdv9 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov9[ k ] = ov[k] + ( j9*sv[k][9] );\n\t\t}\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv9 = sv[k][9] - ( s8*sv[k][8] );\n\t\t\t\tov8[ k ] = ov9[k] + ( j8*sv[k][8] );\n\t\t\t}\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv8 = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t\t}\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the loop dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv9 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Initialize ndarray-like objects for representing zero-dimensional sub-array views of ancillary ndarray arguments.\n*\n* ## Notes\n*\n* -   This function ignores the first two ndarray-like objects, which are assumed to be the input and output ndarray, respectively.\n* -   This function mutates the provided output array.\n*\n* @private\n* @param {ArrayLikeObject<Object>} arrays - list of ndarray-like objects\n* @param {Array<Object>} out - output array\n* @returns {Array<Object>} output array\n*/\nfunction initializeViews( arrays, out ) {\n\tvar v;\n\tvar i;\n\n\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\tv = arrays[ i ];\n\t\tout.push({\n\t\t\t'dtype': v.dtype,\n\t\t\t'data': v.data,\n\t\t\t'shape': [],\n\t\t\t'strides': [ 0 ],\n\t\t\t'offset': v.offset,\n\t\t\t'order': v.order\n\t\t});\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default initializeViews;\n"],"names":["identity","x","broadcast","dtype","data","shape","strides","offset","order","squeeze","arr","index","sh","sx","contiguous","len","iox","xmmv","ind","minmaxViewBufferIndex","copyToWorkspace","workspace","view","assign","copyFromWorkspace","strategy","ndims","ns","i","length","input","output","iterationOrder","ndarraylike2object","emptyLike","ndarraylike2ndarray","incrementOffsets","offsets","inc","setViewOffsets","views","arrays","out","push","MODE","UNARY","fcn","strategyX","strategyY","opts","stridesX","stridesY","dv0","S0","iv","i0","y","dv1","S1","sv","i1","isRowMajor","dv2","S2","i2","dv3","S3","i3","dv4","S4","i4","dv5","S5","i5","dv6","S6","i6","dv7","S7","i7","dv8","S8","i8","dv9","S9","i9","BLOCKED_UNARY","bsize","ov1","s0","s1","ov","j0","j1","N","o","k","loopOrder","sy","takeIndexed","idx","blockSize","zeros","ov2","s2","j2","ov3","s3","j3","ov4","s4","j4","ov5","s5","j5","ov6","s6","j6","ov7","s7","j7","ov8","s8","j8","ov9","s9","j9","MAX_DIMS","unaryStrided1d","dims","options","ldims","tmp","shl","shc","shx","ioy","scx","scy","slx","sly","d","s","M","K","j","arguments","ndarray2object","normalizeIndices","RangeError","format","join","sort","Error","indicesComplement","takeIndexed2","numel","v","initializeViews","io","vind2bind","unarynd"],"mappings":"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"}