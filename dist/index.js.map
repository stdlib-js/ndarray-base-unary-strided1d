{
  "version": 3,
  "sources": ["../lib/initialize_array_views.js", "../lib/strategy.js", "../lib/increment_offsets.js", "../lib/set_view_offsets.js", "../lib/offsets.js", "../lib/2d_blocked.js", "../lib/3d_blocked.js", "../lib/4d_blocked.js", "../lib/5d_blocked.js", "../lib/6d_blocked.js", "../lib/7d_blocked.js", "../lib/8d_blocked.js", "../lib/9d_blocked.js", "../lib/10d_blocked.js", "../lib/0d.js", "../lib/1d.js", "../lib/2d.js", "../lib/3d.js", "../lib/4d.js", "../lib/5d.js", "../lib/6d.js", "../lib/7d.js", "../lib/8d.js", "../lib/9d.js", "../lib/10d.js", "../lib/nd.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Initialize ndarray-like objects for representing zero-dimensional sub-array views of ancillary ndarray arguments.\n*\n* ## Notes\n*\n* -   This function ignores the first two ndarray-like objects, which are assumed to be the input and output ndarray, respectively.\n* -   This function mutates the provided output array.\n*\n* @private\n* @param {ArrayLikeObject<Object>} arrays - list of ndarray-like objects\n* @param {Array<Object>} out - output array\n* @returns {Array<Object>} output array\n*/\nfunction initializeViews( arrays, out ) {\n\tvar v;\n\tvar i;\n\n\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\tv = arrays[ i ];\n\t\tout.push({\n\t\t\t'dtype': v.dtype,\n\t\t\t'data': v.data,\n\t\t\t'shape': [],\n\t\t\t'strides': [ 0 ],\n\t\t\t'offset': v.offset,\n\t\t\t'order': v.order\n\t\t});\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = initializeViews;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar iterationOrder = require( '@stdlib/ndarray-base-iteration-order' );\nvar minmaxViewBufferIndex = require( '@stdlib/ndarray-base-minmax-view-buffer-index' ).assign;\nvar ndarraylike2object = require( '@stdlib/ndarray-base-ndarraylike2object' );\nvar assign = require( '@stdlib/ndarray-base-assign' );\nvar ndarraylike2ndarray = require( '@stdlib/ndarray-base-ndarraylike2ndarray' );\nvar emptyLike = require( '@stdlib/ndarray-base-empty-like' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns an input ndarray.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @returns {ndarrayLike} input ndarray\n*/\nfunction identity( x ) {\n\treturn x;\n}\n\n/**\n* Broadcasts a zero-dimensional ndarray to a one-dimensional ndarray view containing a single element.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @returns {ndarrayLike} broadcasted ndarray view\n*/\nfunction broadcast( x ) {\n\t// NOTE: the following properties must be set in the exact same order as in `x` in order to ensure that the returned object has the same hidden shape as the input ndarray-like object...\n\treturn {\n\t\t'dtype': x.dtype,\n\t\t'data': x.data,\n\t\t'shape': [ 1 ],\n\t\t'strides': [ 0 ],\n\t\t'offset': x.offset,\n\t\t'order': x.order\n\t};\n}\n\n/**\n* Returns a function which returns an ndarray view in which the singleton dimensions are removed from an input ndarray having only a single non-singleton dimension.\n*\n* @private\n* @param {ndarrayLike} arr - original ndarray\n* @param {NonNegativeInteger} index - index of the non-singleton dimension\n* @returns {Function} function for returning an ndarray view\n*/\nfunction squeeze( arr, index ) {\n\tvar sh = [ arr.shape[ index ] ];\n\tvar sx = [ arr.strides[ index ] ];\n\treturn reshape;\n\n\t/**\n\t* Returns an ndarray view in which the singleton dimensions are removed from an input ndarray having only a single non-singleton dimension.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - input ndarray\n\t* @returns {ndarrayLike} a squeezed ndarray view\n\t*/\n\tfunction reshape( x ) {\n\t\t// NOTE: the following properties must be set in the exact same order as in `arr` in order to ensure that the returned object has the same hidden shape as the input ndarray-like object...\n\t\treturn {\n\t\t\t'dtype': x.dtype,\n\t\t\t'data': x.data,\n\t\t\t'shape': sh,\n\t\t\t'strides': sx,\n\t\t\t'offset': x.offset,\n\t\t\t'order': x.order\n\t\t};\n\t}\n}\n\n/**\n* Returns a function which returns a one-dimensional ndarray view of a contiguous input ndarray having more than one dimension.\n*\n* @private\n* @param {NonNegativeInteger} len - number of elements in an ndarray\n* @param {integer} iox - iteration order\n* @returns {Function} function for returning a one-dimensional ndarray view\n*/\nfunction contiguous( len, iox ) {\n\tvar xmmv;\n\tvar ind;\n\tvar sh;\n\tvar sx;\n\n\t// Resolve the index of the min/max view buffer element which is the first indexed element...\n\tif ( iox === 1 ) {\n\t\tind = 0;\n\t} else {\n\t\tind = 1;\n\t}\n\t// Initialize an array for storing the min/max view buffer elements:\n\txmmv = [ 0, 0 ]; // [ min, max ]\n\n\t// Initialize the output one-dimensional view's shape and strides:\n\tsh = [ len ];\n\tsx = [ iox ];\n\n\treturn reshape;\n\n\t/**\n\t* Returns a one-dimensional ndarray view of a contiguous input ndarray having more than one dimension.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - input ndarray\n\t* @returns {ndarrayLike} a one-dimensional ndarray view\n\t*/\n\tfunction reshape( x ) {\n\t\t// Resolve the minimum and maximum linear indices in the underlying data buffer which are accessible to the input ndarray view:\n\t\tminmaxViewBufferIndex( x.shape, x.strides, x.offset, xmmv );\n\n\t\t// NOTE: the following properties must be set in the exact same order as in `x` in order to ensure that the returned object has the same hidden shape as the input ndarray-like object...\n\t\treturn {\n\t\t\t'dtype': x.dtype,\n\t\t\t'data': x.data,\n\t\t\t'shape': sh,\n\t\t\t'strides': sx,\n\t\t\t'offset': xmmv[ ind ], // the index of the first indexed element\n\t\t\t'order': x.order\n\t\t};\n\t}\n}\n\n/**\n* Returns a function which copies an input ndarray to a contiguous ndarray workspace.\n*\n* @private\n* @param {NonNegativeInteger} len - number of elements in an ndarray\n* @param {ndarrayLike} workspace - ndarray workspace\n* @returns {Function} function which copies an input ndarray to a contiguous ndarray workspace\n*/\nfunction copyToWorkspace( len, workspace ) {\n\t// NOTE: the following properties must be set in the exact same order as in the input ndarray-like object in order to ensure that the returned object has the same hidden shape...\n\tvar view = {\n\t\t'dtype': workspace.dtype,\n\t\t'data': workspace.data,\n\t\t'shape': [ len ],\n\t\t'strides': [ 1 ],\n\t\t'offset': workspace.offset,\n\t\t'order': workspace.order\n\t};\n\treturn reshape;\n\n\t/**\n\t* Copies an input ndarray to a contiguous ndarray workspace and returns a one-dimensional workspace view.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - input ndarray\n\t* @returns {ndarrayLike} one-dimensional workspace view\n\t*/\n\tfunction reshape( x ) {\n\t\tassign( [ x, workspace ] );\n\t\treturn view;\n\t}\n}\n\n/**\n* Returns a function which copies from a contiguous ndarray workspace to an input ndarray.\n*\n* @private\n* @param {ndarrayLike} workspace - ndarray workspace\n* @returns {Function} function which copies from a contiguous ndarray workspace to an input ndarray\n*/\nfunction copyFromWorkspace( workspace ) {\n\treturn copy;\n\n\t/**\n\t* Copies from a contiguous ndarray workspace to an input ndarray.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - input ndarray\n\t* @returns {ndarrayLike} input ndarray\n\t*/\n\tfunction copy( x ) {\n\t\tassign( [ workspace, x ] );\n\t\treturn x;\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Returns an object for reshaping input ndarrays which have the same data type, shape, and strides as a provided ndarray.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @param {string} x.dtype - input ndarray data type\n* @param {Collection} x.data - input ndarray data buffer\n* @param {NonNegativeIntegerArray} x.shape - input ndarray shape\n* @param {IntegerArray} x.strides - input ndarray strides\n* @param {NonNegativeInteger} x.offset - input ndarray index offset\n* @param {string} x.order - input ndarray memory layout\n* @returns {Object} object containing methods implementing a reshape strategy\n*/\nfunction strategy( x ) {\n\tvar workspace;\n\tvar ndims;\n\tvar xmmv;\n\tvar len;\n\tvar iox;\n\tvar sh;\n\tvar ns;\n\tvar i;\n\n\t// Resolve the number of array dimensions:\n\tsh = x.shape;\n\tndims = sh.length;\n\n\t// Check whether the ndarray is zero-dimensional...\n\tif ( ndims === 0 ) {\n\t\treturn {\n\t\t\t'input': broadcast,\n\t\t\t'output': identity\n\t\t};\n\t}\n\t// Check whether the ndarray is already one-dimensional...\n\tif ( ndims === 1 ) {\n\t\treturn {\n\t\t\t'input': identity,\n\t\t\t'output': identity\n\t\t};\n\t}\n\t// Determine the number of singleton dimensions...\n\tlen = 1; // number of elements\n\tns = 0;  // number of singleton dimensions\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\t// Check whether the current dimension is a singleton dimension...\n\t\tif ( sh[ i ] === 1 ) {\n\t\t\tns += 1;\n\t\t}\n\t\tlen *= sh[ i ];\n\t}\n\t// Determine whether the ndarray has only **one** non-singleton dimension (e.g., ndims=4, shape=[10,1,1,1]) so that we can simply create an ndarray view without the singleton dimensions...\n\tif ( ns === ndims-1 ) {\n\t\t// Get the index of the non-singleton dimension...\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\tif ( sh[ i ] !== 1 ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\t'input': squeeze( x, i ),\n\t\t\t'output': identity\n\t\t};\n\t}\n\tiox = iterationOrder( x.strides ); // +/-1\n\n\t// Determine whether we can avoid copying data...\n\tif ( iox !== 0 ) {\n\t\t// Determine the minimum and maximum linear indices which are accessible by the ndarray view:\n\t\txmmv = minmaxViewBufferIndex( sh, x.strides, x.offset, [ 0, 0 ] );\n\n\t\t// Determine whether we can ignore shape (and strides) and create a new one-dimensional ndarray view...\n\t\tif ( len === ( xmmv[1]-xmmv[0]+1 ) ) {\n\t\t\treturn {\n\t\t\t\t'input': contiguous( len, iox ),\n\t\t\t\t'output': identity\n\t\t\t};\n\t\t}\n\t\t// The ndarray is non-contiguous, so we cannot directly interpret as a one-dimensional ndarray...\n\n\t\t// Fall-through to copying to a workspace ndarray...\n\t}\n\t// At this point, we're dealing with a non-contiguous multi-dimensional ndarray, so we need to copy to a contiguous workspace:\n\tworkspace = ndarraylike2object( emptyLike( ndarraylike2ndarray( x ) ) );\n\treturn {\n\t\t'input': copyToWorkspace( len, workspace ),\n\t\t'output': copyFromWorkspace( workspace )\n\t};\n}\n\n\n// EXPORTS //\n\nmodule.exports = strategy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Increments index offsets according to a list of increments.\n*\n* ## Notes\n*\n* -   This function mutates the list of index offsets.\n*\n* @private\n* @param {NonNegativeIntegerArray} offsets - list of index offsets\n* @param {NonNegativeIntegerArray} inc - list of increments\n* @returns {NonNegativeIntegerArray} updated offsets\n*/\nfunction incrementOffsets( offsets, inc ) {\n\tvar i;\n\tfor ( i = 0; i < offsets.length; i++ ) {\n\t\toffsets[ i ] += inc[ i ];\n\t}\n\treturn offsets;\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrementOffsets;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets view offsets according to a list of index offsets.\n*\n* ## Notes\n*\n* -   This function mutates the provides view objects.\n*\n* @private\n* @param {Array<Object>} views - list of ndarray-like objects representing ndarray views\n* @param {NonNegativeIntegerArray} offsets - list of index offsets\n* @returns {Array<Object>} updated views\n*/\nfunction setViewOffsets( views, offsets ) {\n\tvar i;\n\tfor ( i = 0; i < offsets.length; i++ ) {\n\t\tviews[ i ].offset = offsets[ i ];\n\t}\n\treturn views;\n}\n\n\n// EXPORTS //\n\nmodule.exports = setViewOffsets;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Resolves index offsets from a list of ndarray-like objects.\n*\n* @private\n* @param {ArrayLikeObject<Object>} arrays - list of ndarray-like objects\n* @returns {NonNegativeIntegerArray} list of offsets\n*/\nfunction offsets( arrays ) {\n\tvar out = [];\n\tvar i;\n\tfor ( i = 0; i < arrays.length; i++ ) {\n\t\tout.push( arrays[ i ].offset );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = offsets;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 3 ],\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* blockedunary2d( wrapper, [ x, y, initial ], views, [ 1, 3 ], [ 12, 4 ], [ 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ]\n*/\nfunction blockedunary2d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar ov1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( shape, stridesX, stridesY );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tdv1 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov1[ k ] = ov[k] + ( j1*sv[k][1] );\n\t\t}\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t}\n\t\t\t// Iterate over the loop dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 3 ],\n*     'strides': [ 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* blockedunary3d( wrapper, [ x, y, initial ], views, [ 1, 1, 3 ], [ 12, 12, 4 ], [ 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ]\n*/\nfunction blockedunary3d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar ov1;\n\tvar ov2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( shape, stridesX, stridesY );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov2[ k ] = ov[k] + ( j2*sv[k][2] );\n\t\t}\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t}\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t}\n\t\t\t\t// Iterate over the loop dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary3d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* blockedunary4d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 3 ], [ 12, 12, 12, 4 ], [ 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ]\n*/\nfunction blockedunary4d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( shape, stridesX, stridesY );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov3[ k ] = ov[k] + ( j3*sv[k][3] );\n\t\t}\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t}\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t}\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t}\n\t\t\t\t\t// Iterate over the loop dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary4d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* blockedunary5d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ]\n*/\nfunction blockedunary5d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( shape, stridesX, stridesY );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov4[ k ] = ov[k] + ( j4*sv[k][4] );\n\t\t}\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t}\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t}\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Iterate over the loop dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary5d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* blockedunary6d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary6d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( shape, stridesX, stridesY );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov5[ k ] = ov[k] + ( j5*sv[k][5] );\n\t\t}\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t}\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t}\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Iterate over the loop dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary6d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* blockedunary7d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary7d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( shape, stridesX, stridesY );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov6[ k ] = ov[k] + ( j6*sv[k][6] );\n\t\t}\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t}\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t}\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Iterate over the loop dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary7d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* blockedunary8d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary8d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( shape, stridesX, stridesY );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov7[ k ] = ov[k] + ( j7*sv[k][7] );\n\t\t}\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t}\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t}\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Iterate over the loop dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary8d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* blockedunary9d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary9d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( shape, stridesX, stridesY );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov8[ k ] = ov[k] + ( j8*sv[k][8] );\n\t\t}\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv8 = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t}\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t}\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Iterate over the loop dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary9d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* blockedunary10d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary10d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar ov9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( shape, stridesX, stridesY );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tov9 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tdv9 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov9[ k ] = ov[k] + ( j9*sv[k][9] );\n\t\t}\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv9 = sv[k][9] - ( s8*sv[k][8] );\n\t\t\t\tov8[ k ] = ov9[k] + ( j8*sv[k][8] );\n\t\t\t}\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv8 = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t\t}\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv7 = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv6 = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv5 = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the loop dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv9 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary10d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 2, 2 ];\n* var ysh = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 3 ],\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unary0d( wrapper, [ x, y, initial ], strategy, strategy, {} );\n*\n* var v = y.data;\n* // returns <Float64Array>[ 1.0, 3.0, 6.0, 10.0 ]\n*/\nfunction unary0d( fcn, arrays, strategyX, strategyY, opts ) {\n\tarrays[ 0 ] = strategyX.input( arrays[ 0 ] );\n\tarrays[ 1 ] = strategyY.input( arrays[ 1 ] );\n\tfcn( arrays, opts );\n\tstrategyY.output( arrays[ 1 ] );\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary0d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 3 ],\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unary1d( wrapper, [ x, y, initial ], views, [ 3 ], [ 4 ], [ 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ]\n*/\nfunction unary1d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len\n\tvar dv0;\n\tvar S0;\n\tvar iv;\n\tvar i0;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray:\n\ty = arrays[ 1 ];\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tS0 = shape[ 0 ];\n\tdv0 = [\n\t\tstridesX[0],\n\t\tstridesY[0]\n\t];\n\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\tdv0.push( arrays[i].strides[0] );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Iterate over the loop dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tsetViewOffsets( views, iv );\n\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\tfcn( views, opts );\n\t\tstrategyY.output( y );\n\t\tincrementOffsets( iv, dv0 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary1d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 3 ],\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unary2d( wrapper, [ x, y, initial ], views, [ 1, 3 ], [ 12, 4 ], [ 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ]\n*/\nfunction unary2d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len\n\tvar dv0;\n\tvar dv1;\n\tvar S0;\n\tvar S1;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray:\n\ty = arrays[ 1 ];\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = shape[ 1 ];\n\t\tS1 = shape[ 0 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[1],\n\t\t\tstridesY[1]\n\t\t];\n\t\tdv1 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[0] - ( S0*stridesX[1] ),\n\t\t\tstridesY[0] - ( S0*stridesY[1] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[1] );\n\t\t\tdv1.push( sv[0] - ( S0*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = shape[ 0 ];\n\t\tS1 = shape[ 1 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[0],\n\t\t\tstridesY[0]\n\t\t];\n\t\tdv1 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[1] - ( S0*stridesX[0] ),\n\t\t\tstridesY[1] - ( S0*stridesY[0] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Iterate over the loop dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tsetViewOffsets( views, iv );\n\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\tfcn( views, opts );\n\t\t\tstrategyY.output( y );\n\t\t\tincrementOffsets( iv, dv0 );\n\t\t}\n\t\tincrementOffsets( iv, dv1 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 3 ],\n*     'strides': [ 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unary3d( wrapper, [ x, y, initial ], views, [ 1, 1, 3 ], [ 12, 12, 4 ], [ 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ]\n*/\nfunction unary3d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray:\n\ty = arrays[ 1 ];\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = shape[ 2 ];\n\t\tS1 = shape[ 1 ];\n\t\tS2 = shape[ 0 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[2],\n\t\t\tstridesY[2]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[1] - ( S0*stridesX[2] ),\n\t\t\tstridesY[1] - ( S0*stridesY[2] )\n\t\t];\n\t\tdv2 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[0] - ( S1*stridesX[1] ),\n\t\t\tstridesY[0] - ( S1*stridesY[1] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[2] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[2] ) );\n\t\t\tdv2.push( sv[0] - ( S1*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = shape[ 0 ];\n\t\tS1 = shape[ 1 ];\n\t\tS2 = shape[ 2 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[0],\n\t\t\tstridesY[0]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[1] - ( S0*stridesX[0] ),\n\t\t\tstridesY[1] - ( S0*stridesY[0] )\n\t\t];\n\t\tdv2 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[2] - ( S1*stridesX[1] ),\n\t\t\tstridesY[2] - ( S1*stridesY[1] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Iterate over the loop dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\tfcn( views, opts );\n\t\t\t\tstrategyY.output( y );\n\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv1 );\n\t\t}\n\t\tincrementOffsets( iv, dv2 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary3d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unary4d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 3 ], [ 12, 12, 12, 4 ], [ 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ]\n*/\nfunction unary4d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray:\n\ty = arrays[ 1 ];\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = shape[ 3 ];\n\t\tS1 = shape[ 2 ];\n\t\tS2 = shape[ 1 ];\n\t\tS3 = shape[ 0 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[3],\n\t\t\tstridesY[3]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[2] - ( S0*stridesX[3] ),\n\t\t\tstridesY[2] - ( S0*stridesY[3] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[1] - ( S1*stridesX[2] ),\n\t\t\tstridesY[1] - ( S1*stridesY[2] )\n\t\t];\n\t\tdv3 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[0] - ( S2*stridesX[1] ),\n\t\t\tstridesY[0] - ( S2*stridesY[1] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[3] );\n\t\t\tdv1.push( sv[2] - ( S0*sv[3] ) );\n\t\t\tdv2.push( sv[1] - ( S1*sv[2] ) );\n\t\t\tdv3.push( sv[0] - ( S2*sv[1]) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = shape[ 0 ];\n\t\tS1 = shape[ 1 ];\n\t\tS2 = shape[ 2 ];\n\t\tS3 = shape[ 3 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[0],\n\t\t\tstridesY[0]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[1] - ( S0*stridesX[0] ),\n\t\t\tstridesY[1] - ( S0*stridesY[0] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[2] - ( S1*stridesX[1] ),\n\t\t\tstridesY[2] - ( S1*stridesY[1] )\n\t\t];\n\t\tdv3 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[3] - ( S2*stridesX[2] ),\n\t\t\tstridesY[3] - ( S2*stridesY[2] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Iterate over the loop dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv2 );\n\t\t}\n\t\tincrementOffsets( iv, dv3 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary4d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unary5d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ]\n*/\nfunction unary5d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray:\n\ty = arrays[ 1 ];\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = shape[ 4 ];\n\t\tS1 = shape[ 3 ];\n\t\tS2 = shape[ 2 ];\n\t\tS3 = shape[ 1 ];\n\t\tS4 = shape[ 0 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[4],\n\t\t\tstridesY[4]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[3] - ( S0*stridesX[4] ),\n\t\t\tstridesY[3] - ( S0*stridesY[4] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[2] - ( S1*stridesX[3] ),\n\t\t\tstridesY[2] - ( S1*stridesY[3] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[1] - ( S2*stridesX[2] ),\n\t\t\tstridesY[1] - ( S2*stridesY[2] )\n\t\t];\n\t\tdv4 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[0] - ( S3*stridesX[1] ),\n\t\t\tstridesY[0] - ( S3*stridesY[1] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[4] );\n\t\t\tdv1.push( sv[3] - ( S0*sv[4] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[3] ) );\n\t\t\tdv3.push( sv[1] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[0] - ( S3*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = shape[ 0 ];\n\t\tS1 = shape[ 1 ];\n\t\tS2 = shape[ 2 ];\n\t\tS3 = shape[ 3 ];\n\t\tS4 = shape[ 4 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[0],\n\t\t\tstridesY[0]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[1] - ( S0*stridesX[0] ),\n\t\t\tstridesY[1] - ( S0*stridesY[0] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[2] - ( S1*stridesX[1] ),\n\t\t\tstridesY[2] - ( S1*stridesY[1] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[3] - ( S2*stridesX[2] ),\n\t\t\tstridesY[3] - ( S2*stridesY[2] )\n\t\t];\n\t\tdv4 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[4] - ( S3*stridesX[3] ),\n\t\t\tstridesY[4] - ( S3*stridesY[3] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Iterate over the loop dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv3 );\n\t\t}\n\t\tincrementOffsets( iv, dv4 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary5d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unary6d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ] ]\n*/\nfunction unary6d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray:\n\ty = arrays[ 1 ];\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = shape[ 5 ];\n\t\tS1 = shape[ 4 ];\n\t\tS2 = shape[ 3 ];\n\t\tS3 = shape[ 2 ];\n\t\tS4 = shape[ 1 ];\n\t\tS5 = shape[ 0 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[5],\n\t\t\tstridesY[5]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[4] - ( S0*stridesX[5] ),\n\t\t\tstridesY[4] - ( S0*stridesY[5] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[3] - ( S1*stridesX[4] ),\n\t\t\tstridesY[3] - ( S1*stridesY[4] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[2] - ( S2*stridesX[3] ),\n\t\t\tstridesY[2] - ( S2*stridesY[3] )\n\t\t];\n\t\tdv4 = [\n\t\t\tstridesX[1] - ( S3*stridesX[2] ),\n\t\t\tstridesY[1] - ( S3*stridesY[2] )\n\t\t];\n\t\tdv5 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[0] - ( S4*stridesX[1] ),\n\t\t\tstridesY[0] - ( S4*stridesY[1] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[5] );\n\t\t\tdv1.push( sv[4] - ( S0*sv[5] ) );\n\t\t\tdv2.push( sv[3] - ( S1*sv[4] ) );\n\t\t\tdv3.push( sv[2] - ( S2*sv[3] ) );\n\t\t\tdv4.push( sv[1] - ( S3*sv[2] ) );\n\t\t\tdv5.push( sv[0] - ( S4*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = shape[ 0 ];\n\t\tS1 = shape[ 1 ];\n\t\tS2 = shape[ 2 ];\n\t\tS3 = shape[ 3 ];\n\t\tS4 = shape[ 4 ];\n\t\tS5 = shape[ 5 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[0],\n\t\t\tstridesY[0]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[1] - ( S0*stridesX[0] ),\n\t\t\tstridesY[1] - ( S0*stridesY[0] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[2] - ( S1*stridesX[1] ),\n\t\t\tstridesY[2] - ( S1*stridesY[1] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[3] - ( S2*stridesX[2] ),\n\t\t\tstridesY[3] - ( S2*stridesY[2] )\n\t\t];\n\t\tdv4 = [\n\t\t\tstridesX[4] - ( S3*stridesX[3] ),\n\t\t\tstridesY[4] - ( S3*stridesY[3] )\n\t\t];\n\t\tdv5 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[5] - ( S4*stridesX[4] ),\n\t\t\tstridesY[5] - ( S4*stridesY[4] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Iterate over the loop dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv4 );\n\t\t}\n\t\tincrementOffsets( iv, dv5 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary6d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unary7d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ] ] ]\n*/\nfunction unary7d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray:\n\ty = arrays[ 1 ];\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = shape[ 6 ];\n\t\tS1 = shape[ 5 ];\n\t\tS2 = shape[ 4 ];\n\t\tS3 = shape[ 3 ];\n\t\tS4 = shape[ 2 ];\n\t\tS5 = shape[ 1 ];\n\t\tS6 = shape[ 0 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[6],\n\t\t\tstridesY[6]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[5] - ( S0*stridesX[6] ),\n\t\t\tstridesY[5] - ( S0*stridesY[6] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[4] - ( S1*stridesX[5] ),\n\t\t\tstridesY[4] - ( S1*stridesY[5] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[3] - ( S2*stridesX[4] ),\n\t\t\tstridesY[3] - ( S2*stridesY[4] )\n\t\t];\n\t\tdv4 = [\n\t\t\tstridesX[2] - ( S3*stridesX[3] ),\n\t\t\tstridesY[2] - ( S3*stridesY[3] )\n\t\t];\n\t\tdv5 = [\n\t\t\tstridesX[1] - ( S4*stridesX[2] ),\n\t\t\tstridesY[1] - ( S4*stridesY[2] )\n\t\t];\n\t\tdv6 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[0] - ( S5*stridesX[1] ),\n\t\t\tstridesY[0] - ( S5*stridesY[1] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[6] );\n\t\t\tdv1.push( sv[5] - ( S0*sv[6] ) );\n\t\t\tdv2.push( sv[4] - ( S1*sv[5] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[4] ) );\n\t\t\tdv4.push( sv[2] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[1] - ( S4*sv[2] ) );\n\t\t\tdv6.push( sv[0] - ( S5*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = shape[ 0 ];\n\t\tS1 = shape[ 1 ];\n\t\tS2 = shape[ 2 ];\n\t\tS3 = shape[ 3 ];\n\t\tS4 = shape[ 4 ];\n\t\tS5 = shape[ 5 ];\n\t\tS6 = shape[ 6 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[0],\n\t\t\tstridesY[0]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[1] - ( S0*stridesX[0] ),\n\t\t\tstridesY[1] - ( S0*stridesY[0] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[2] - ( S1*stridesX[1] ),\n\t\t\tstridesY[2] - ( S1*stridesY[1] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[3] - ( S2*stridesX[2] ),\n\t\t\tstridesY[3] - ( S2*stridesY[2] )\n\t\t];\n\t\tdv4 = [\n\t\t\tstridesX[4] - ( S3*stridesX[3] ),\n\t\t\tstridesY[4] - ( S3*stridesY[3] )\n\t\t];\n\t\tdv5 = [\n\t\t\tstridesX[5] - ( S4*stridesX[4] ),\n\t\t\tstridesY[5] - ( S4*stridesY[4] )\n\t\t];\n\t\tdv6 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[6] - ( S5*stridesX[5] ),\n\t\t\tstridesY[6] - ( S5*stridesY[5] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Iterate over the loop dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv5 );\n\t\t}\n\t\tincrementOffsets( iv, dv6 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary7d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unary8d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ] ] ] ]\n*/\nfunction unary8d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len, max-statements\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray:\n\ty = arrays[ 1 ];\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = shape[ 7 ];\n\t\tS1 = shape[ 6 ];\n\t\tS2 = shape[ 5 ];\n\t\tS3 = shape[ 4 ];\n\t\tS4 = shape[ 3 ];\n\t\tS5 = shape[ 2 ];\n\t\tS6 = shape[ 1 ];\n\t\tS7 = shape[ 0 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[7],\n\t\t\tstridesY[7]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[6] - ( S0*stridesX[7] ),\n\t\t\tstridesY[6] - ( S0*stridesY[7] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[5] - ( S1*stridesX[6] ),\n\t\t\tstridesY[5] - ( S1*stridesY[6] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[4] - ( S2*stridesX[5] ),\n\t\t\tstridesY[4] - ( S2*stridesY[5] )\n\t\t];\n\t\tdv4 = [\n\t\t\tstridesX[3] - ( S3*stridesX[4] ),\n\t\t\tstridesY[3] - ( S3*stridesY[4] )\n\t\t];\n\t\tdv5 = [\n\t\t\tstridesX[2] - ( S4*stridesX[3] ),\n\t\t\tstridesY[2] - ( S4*stridesY[3] )\n\t\t];\n\t\tdv6 = [\n\t\t\tstridesX[1] - ( S5*stridesX[2] ),\n\t\t\tstridesY[1] - ( S5*stridesY[2] )\n\t\t];\n\t\tdv7 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[0] - ( S6*stridesX[1] ),\n\t\t\tstridesY[0] - ( S6*stridesY[1] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[7] );\n\t\t\tdv1.push( sv[6] - ( S0*sv[7] ) );\n\t\t\tdv2.push( sv[5] - ( S1*sv[6] ) );\n\t\t\tdv3.push( sv[4] - ( S2*sv[5] ) );\n\t\t\tdv4.push( sv[3] - ( S3*sv[4] ) );\n\t\t\tdv5.push( sv[2] - ( S4*sv[3] ) );\n\t\t\tdv6.push( sv[1] - ( S5*sv[2] ) );\n\t\t\tdv7.push( sv[0] - ( S6*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = shape[ 0 ];\n\t\tS1 = shape[ 1 ];\n\t\tS2 = shape[ 2 ];\n\t\tS3 = shape[ 3 ];\n\t\tS4 = shape[ 4 ];\n\t\tS5 = shape[ 5 ];\n\t\tS6 = shape[ 6 ];\n\t\tS7 = shape[ 7 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[0],\n\t\t\tstridesY[0]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[1] - ( S0*stridesX[0] ),\n\t\t\tstridesY[1] - ( S0*stridesY[0] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[2] - ( S1*stridesX[1] ),\n\t\t\tstridesY[2] - ( S1*stridesY[1] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[3] - ( S2*stridesX[2] ),\n\t\t\tstridesY[3] - ( S2*stridesY[2] )\n\t\t];\n\t\tdv4 = [\n\t\t\tstridesX[4] - ( S3*stridesX[3] ),\n\t\t\tstridesY[4] - ( S3*stridesY[3] )\n\t\t];\n\t\tdv5 = [\n\t\t\tstridesX[5] - ( S4*stridesX[4] ),\n\t\t\tstridesY[5] - ( S4*stridesY[4] )\n\t\t];\n\t\tdv6 = [\n\t\t\tstridesX[6] - ( S5*stridesX[5] ),\n\t\t\tstridesY[6] - ( S5*stridesY[5] )\n\t\t];\n\t\tdv7 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[7] - ( S6*stridesX[6] ),\n\t\t\tstridesY[7] - ( S6*stridesY[6] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Iterate over the loop dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv6 );\n\t\t}\n\t\tincrementOffsets( iv, dv7 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary8d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unary9d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ] ] ] ] ]\n*/\nfunction unary9d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-statements\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray:\n\ty = arrays[ 1 ];\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = shape[ 8 ];\n\t\tS1 = shape[ 7 ];\n\t\tS2 = shape[ 6 ];\n\t\tS3 = shape[ 5 ];\n\t\tS4 = shape[ 4 ];\n\t\tS5 = shape[ 3 ];\n\t\tS6 = shape[ 2 ];\n\t\tS7 = shape[ 1 ];\n\t\tS8 = shape[ 0 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[8],\n\t\t\tstridesY[8]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[7] - ( S0*stridesX[8] ),\n\t\t\tstridesY[7] - ( S0*stridesY[8] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[6] - ( S1*stridesX[7] ),\n\t\t\tstridesY[6] - ( S1*stridesY[7] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[5] - ( S2*stridesX[6] ),\n\t\t\tstridesY[5] - ( S2*stridesY[6] )\n\t\t];\n\t\tdv4 = [\n\t\t\tstridesX[4] - ( S3*stridesX[5] ),\n\t\t\tstridesY[4] - ( S3*stridesY[5] )\n\t\t];\n\t\tdv5 = [\n\t\t\tstridesX[3] - ( S4*stridesX[4] ),\n\t\t\tstridesY[3] - ( S4*stridesY[4] )\n\t\t];\n\t\tdv6 = [\n\t\t\tstridesX[2] - ( S5*stridesX[3] ),\n\t\t\tstridesY[2] - ( S5*stridesY[3] )\n\t\t];\n\t\tdv7 = [\n\t\t\tstridesX[1] - ( S6*stridesX[2] ),\n\t\t\tstridesY[1] - ( S6*stridesY[2] )\n\t\t];\n\t\tdv8 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[0] - ( S7*stridesX[1] ),\n\t\t\tstridesY[0] - ( S7*stridesY[1] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[8] );\n\t\t\tdv1.push( sv[7] - ( S0*sv[8] ) );\n\t\t\tdv2.push( sv[6] - ( S1*sv[7] ) );\n\t\t\tdv3.push( sv[5] - ( S2*sv[6] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[5] ) );\n\t\t\tdv5.push( sv[3] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[2] - ( S5*sv[3] ) );\n\t\t\tdv7.push( sv[1] - ( S6*sv[2] ) );\n\t\t\tdv8.push( sv[0] - ( S7*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = shape[ 0 ];\n\t\tS1 = shape[ 1 ];\n\t\tS2 = shape[ 2 ];\n\t\tS3 = shape[ 3 ];\n\t\tS4 = shape[ 4 ];\n\t\tS5 = shape[ 5 ];\n\t\tS6 = shape[ 6 ];\n\t\tS7 = shape[ 7 ];\n\t\tS8 = shape[ 8 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[0],\n\t\t\tstridesY[0]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[1] - ( S0*stridesX[0] ),\n\t\t\tstridesY[1] - ( S0*stridesY[0] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[2] - ( S1*stridesX[1] ),\n\t\t\tstridesY[2] - ( S1*stridesY[1] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[3] - ( S2*stridesX[2] ),\n\t\t\tstridesY[3] - ( S2*stridesY[2] )\n\t\t];\n\t\tdv4 = [\n\t\t\tstridesX[4] - ( S3*stridesX[3] ),\n\t\t\tstridesY[4] - ( S3*stridesY[3] )\n\t\t];\n\t\tdv5 = [\n\t\t\tstridesX[5] - ( S4*stridesX[4] ),\n\t\t\tstridesY[5] - ( S4*stridesY[4] )\n\t\t];\n\t\tdv6 = [\n\t\t\tstridesX[6] - ( S5*stridesX[5] ),\n\t\t\tstridesY[6] - ( S5*stridesY[5] )\n\t\t];\n\t\tdv7 = [\n\t\t\tstridesX[7] - ( S6*stridesX[6] ),\n\t\t\tstridesY[7] - ( S6*stridesY[6] )\n\t\t];\n\t\tdv8 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[8] - ( S7*stridesX[7] ),\n\t\t\tstridesY[8] - ( S7*stridesY[7] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Iterate over the loop dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv7 );\n\t\t}\n\t\tincrementOffsets( iv, dv8 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary9d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ],\n*     'strides': [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unary10d( wrapper, [ x, y, initial ], views, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ], [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ], [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ] ] ] ] ] ] ] ] ]\n*/\nfunction unary10d( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray:\n\ty = arrays[ 1 ];\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = shape[ 9 ];\n\t\tS1 = shape[ 8 ];\n\t\tS2 = shape[ 7 ];\n\t\tS3 = shape[ 6 ];\n\t\tS4 = shape[ 5 ];\n\t\tS5 = shape[ 4 ];\n\t\tS6 = shape[ 3 ];\n\t\tS7 = shape[ 2 ];\n\t\tS8 = shape[ 1 ];\n\t\tS9 = shape[ 0 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[9],\n\t\t\tstridesY[9]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[8] - ( S0*stridesX[9] ),\n\t\t\tstridesY[8] - ( S0*stridesY[9] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[7] - ( S1*stridesX[8] ),\n\t\t\tstridesY[7] - ( S1*stridesY[8] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[6] - ( S2*stridesX[7] ),\n\t\t\tstridesY[6] - ( S2*stridesY[7] )\n\t\t];\n\t\tdv4 = [\n\t\t\tstridesX[5] - ( S3*stridesX[6] ),\n\t\t\tstridesY[5] - ( S3*stridesY[6] )\n\t\t];\n\t\tdv5 = [\n\t\t\tstridesX[4] - ( S4*stridesX[5] ),\n\t\t\tstridesY[4] - ( S4*stridesY[5] )\n\t\t];\n\t\tdv6 = [\n\t\t\tstridesX[3] - ( S5*stridesX[4] ),\n\t\t\tstridesY[3] - ( S5*stridesY[4] )\n\t\t];\n\t\tdv7 = [\n\t\t\tstridesX[2] - ( S6*stridesX[3] ),\n\t\t\tstridesY[2] - ( S6*stridesY[3] )\n\t\t];\n\t\tdv8 = [\n\t\t\tstridesX[1] - ( S7*stridesX[2] ),\n\t\t\tstridesY[1] - ( S7*stridesY[2] )\n\t\t];\n\t\tdv9 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[0] - ( S8*stridesX[1] ),\n\t\t\tstridesY[0] - ( S8*stridesY[1] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[9] );\n\t\t\tdv1.push( sv[8] - ( S0*sv[9] ) );\n\t\t\tdv2.push( sv[7] - ( S1*sv[8] ) );\n\t\t\tdv3.push( sv[6] - ( S2*sv[7] ) );\n\t\t\tdv4.push( sv[5] - ( S3*sv[6] ) );\n\t\t\tdv5.push( sv[4] - ( S4*sv[5] ) );\n\t\t\tdv6.push( sv[3] - ( S5*sv[4] ) );\n\t\t\tdv7.push( sv[2] - ( S6*sv[3] ) );\n\t\t\tdv8.push( sv[1] - ( S7*sv[2] ) );\n\t\t\tdv9.push( sv[0] - ( S8*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = shape[ 0 ];\n\t\tS1 = shape[ 1 ];\n\t\tS2 = shape[ 2 ];\n\t\tS3 = shape[ 3 ];\n\t\tS4 = shape[ 4 ];\n\t\tS5 = shape[ 5 ];\n\t\tS6 = shape[ 6 ];\n\t\tS7 = shape[ 7 ];\n\t\tS8 = shape[ 8 ];\n\t\tS9 = shape[ 9 ];\n\t\tdv0 = [                                   // offset increment for innermost loop\n\t\t\tstridesX[0],\n\t\t\tstridesY[0]\n\t\t];\n\t\tdv1 = [\n\t\t\tstridesX[1] - ( S0*stridesX[0] ),\n\t\t\tstridesY[1] - ( S0*stridesY[0] )\n\t\t];\n\t\tdv2 = [\n\t\t\tstridesX[2] - ( S1*stridesX[1] ),\n\t\t\tstridesY[2] - ( S1*stridesY[1] )\n\t\t];\n\t\tdv3 = [\n\t\t\tstridesX[3] - ( S2*stridesX[2] ),\n\t\t\tstridesY[3] - ( S2*stridesY[2] )\n\t\t];\n\t\tdv4 = [\n\t\t\tstridesX[4] - ( S3*stridesX[3] ),\n\t\t\tstridesY[4] - ( S3*stridesY[3] )\n\t\t];\n\t\tdv5 = [\n\t\t\tstridesX[5] - ( S4*stridesX[4] ),\n\t\t\tstridesY[5] - ( S4*stridesY[4] )\n\t\t];\n\t\tdv6 = [\n\t\t\tstridesX[6] - ( S5*stridesX[5] ),\n\t\t\tstridesY[6] - ( S5*stridesY[5] )\n\t\t];\n\t\tdv7 = [\n\t\t\tstridesX[7] - ( S6*stridesX[6] ),\n\t\t\tstridesY[7] - ( S6*stridesY[6] )\n\t\t];\n\t\tdv8 = [\n\t\t\tstridesX[8] - ( S7*stridesX[7] ),\n\t\t\tstridesY[8] - ( S7*stridesY[7] )\n\t\t];\n\t\tdv9 = [                                   // offset increment for outermost loop\n\t\t\tstridesX[9] - ( S8*stridesX[8] ),\n\t\t\tstridesY[9] - ( S8*stridesY[8] )\n\t\t];\n\t\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t\tdv8.push( sv[8] - ( S8*sv[8] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Iterate over the loop dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\t\t\t\t\t\t\t\t\t\tfcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\tstrategyY.output( y );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv8 );\n\t\t}\n\t\tincrementOffsets( iv, dv9 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary10d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar vind2bind = require( '@stdlib/ndarray-base-vind2bind' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} shape - loop dimensions\n* @param {IntegerArray} stridesX - loop dimension strides for the input ndarray\n* @param {IntegerArray} stridesY - loop dimension strides for the output ndarray\n* @param {Object} strategyX - strategy for marshaling data to and from an input ndarray view\n* @param {Object} strategyY - strategy for marshaling data to and from an output ndarray view\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 3 ],\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     },\n*     {\n*         'dtype': y.dtype,\n*         'data': y.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': y.offset,\n*         'order': y.order\n*     },\n*     {\n*         'dtype': initial.dtype,\n*         'data': initial.data,\n*         'shape': [],\n*         'strides': [ 0 ],\n*         'offset': initial.offset,\n*         'order': initial.order\n*     }\n* ];\n*\n* // Define an input strategy:\n* function inputStrategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Define an output strategy:\n* function outputStrategy( x ) {\n*     return x;\n* }\n*\n* var strategy = {\n*     'input': inputStrategy,\n*     'output': outputStrategy\n* };\n*\n* // Apply strided function:\n* unarynd( wrapper, [ x, y, initial ], views, [ 3 ], [ 4 ], [ 4 ], strategy, strategy, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ]\n*/\nfunction unarynd( fcn, arrays, views, shape, stridesX, stridesY, strategyX, strategyY, opts ) { // eslint-disable-line max-len\n\tvar len;\n\tvar iv;\n\tvar io;\n\tvar N;\n\tvar v;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tN = arrays.length;\n\n\t// Resolve the output ndarray:\n\ty = arrays[ 1 ];\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( shape );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Iterate based on the linear **view** index, regardless as to how the data is stored in memory...\n\tio = zeros( N );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tv = arrays[ j ];\n\t\t\tio[ j ] = vind2bind( shape, v.strides, iv[ j ], v.order, i, MODE );\n\t\t}\n\t\tsetViewOffsets( views, io );\n\t\tviews[ 0 ] = strategyX.input( views[ 0 ] );\n\t\tviews[ 1 ] = strategyY.input( views[ 1 ] );\n\t\tfcn( views, opts );\n\t\tstrategyY.output( y );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unarynd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ndarray2object = require( '@stdlib/ndarray-base-ndarraylike2object' );\nvar normalizeIndices = require( '@stdlib/ndarray-base-to-unique-normalized-indices' );\nvar indicesComplement = require( '@stdlib/array-base-indices-complement' );\nvar takeIndexed2 = require( '@stdlib/array-base-take-indexed2' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar iterationOrder = require( '@stdlib/ndarray-base-iteration-order' );\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar join = require( '@stdlib/array-base-join' );\nvar format = require( '@stdlib/string-format' );\nvar initializeViews = require( './initialize_array_views.js' );\nvar strategy = require( './strategy.js' );\nvar blockedunary2d = require( './2d_blocked.js' );\nvar blockedunary3d = require( './3d_blocked.js' );\nvar blockedunary4d = require( './4d_blocked.js' );\nvar blockedunary5d = require( './5d_blocked.js' );\nvar blockedunary6d = require( './6d_blocked.js' );\nvar blockedunary7d = require( './7d_blocked.js' );\nvar blockedunary8d = require( './8d_blocked.js' );\nvar blockedunary9d = require( './9d_blocked.js' );\nvar blockedunary10d = require( './10d_blocked.js' );\nvar unary0d = require( './0d.js' );\nvar unary1d = require( './1d.js' );\nvar unary2d = require( './2d.js' );\nvar unary3d = require( './3d.js' );\nvar unary4d = require( './4d.js' );\nvar unary5d = require( './5d.js' );\nvar unary6d = require( './6d.js' );\nvar unary7d = require( './7d.js' );\nvar unary8d = require( './8d.js' );\nvar unary9d = require( './9d.js' );\nvar unary10d = require( './10d.js' );\nvar unarynd = require( './nd.js' );\n\n\n// VARIABLES //\n\nvar UNARY = [\n\tunary0d,\n\tunary1d,\n\tunary2d,\n\tunary3d,\n\tunary4d,\n\tunary5d,\n\tunary6d,\n\tunary7d,\n\tunary8d,\n\tunary9d,\n\tunary10d\n];\nvar BLOCKED_UNARY = [\n\tblockedunary2d, // 0\n\tblockedunary3d,\n\tblockedunary4d,\n\tblockedunary5d,\n\tblockedunary6d,\n\tblockedunary7d,\n\tblockedunary8d,\n\tblockedunary9d,\n\tblockedunary10d // 8\n];\nvar MAX_DIMS = UNARY.length - 1;\n\n\n// MAIN //\n\n/**\n* Applies a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array function\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n* @param {IntegerArray} dims - list of dimensions to which to apply a strided array function\n* @param {Options} [options] - function options\n* @throws {Error} arrays must have the expected number of dimensions\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide unique dimension indices\n* @throws {Error} arrays must have the same loop dimension sizes\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 3 ],\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply strided function:\n* unaryStrided1d( wrapper, [ x, y, initial ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [],\n*     'strides': [ 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply strided function:\n* unaryStrided1d( wrapper, [ x, y, initial ], [ 0, 1, 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 15.0, 21.0 ], [ 28.0, 36.0 ] ], [ [ 45.0, 55.0 ], [ 66.0, 78.0 ] ] ] ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 3, 2, 2 ],\n*     'strides': [ 0, 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply strided function:\n* unaryStrided1d( wrapper, [ x, y, initial ], [] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ 1.0, 2.0 ], [ 3.0, 4.0 ] ], [ [ 5.0, 6.0 ], [ 7.0, 8.0 ] ], [ [ 9.0, 10.0 ], [ 11.0, 12.0 ] ] ]\n*/\nfunction unaryStrided1d( fcn, arrays, dims, options ) {\n\tvar strategyX;\n\tvar strategyY;\n\tvar views;\n\tvar ndims;\n\tvar ldims;\n\tvar opts;\n\tvar arr;\n\tvar tmp;\n\tvar len;\n\tvar shl;\n\tvar shc;\n\tvar shx;\n\tvar iox;\n\tvar ioy;\n\tvar scx;\n\tvar scy;\n\tvar slx;\n\tvar sly;\n\tvar ns;\n\tvar d;\n\tvar s;\n\tvar N;\n\tvar M;\n\tvar K;\n\tvar x;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tif ( arguments.length > 3 ) {\n\t\topts = options;\n\t} else {\n\t\topts = {};\n\t}\n\t// Standardize ndarray meta data...\n\tN = arrays.length;\n\tarr = [];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tarr.push( ndarray2object( arrays[ i ] ) );\n\t}\n\t// Cache references to the input and output arrays:\n\tx = arr[ 0 ];\n\ty = arr[ 1 ];\n\n\t// Resolve the number of input array dimensions:\n\tshx = x.shape;\n\tndims = shx.length;\n\n\t// Verify that we've been provided a list of unique dimension indices...\n\tM = dims.length;\n\td = normalizeIndices( dims, ndims );\n\tif ( d === null ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument contains an out-of-bounds dimension index. Value: [%s].', join( dims, ',' ) ) );\n\t}\n\td.sort();\n\tif ( d.length !== M ) {\n\t\tthrow new Error( format( 'invalid argument. Third argument must contain a list of unique dimension indices. Value: [%s].', join( dims, ',' ) ) );\n\t}\n\t// Check whether we've been provided a valid number of dimensions...\n\tif ( M > ndims ) {\n\t\tthrow new RangeError( format( 'invalid argument. Number of specified dimensions cannot exceed the number of dimensions in the input array. Number of dimensions: %d. Value: [%s].', ndims, join( dims, ',' ) ) );\n\t}\n\t// Verify that provided ancillary ndarrays have the expected number of dimensions...\n\tK = ndims - M;\n\tfor ( i = 2; i < N; i++ ) {\n\t\tif ( arr[ i ].shape.length !== K ) {\n\t\t\tthrow new Error( format( 'invalid argument. Array arguments after the first two arrays must have the same number of loop dimensions. Input array shape: [%s]. Number of loop dimensions: %d. Array shape: [%s] (index: %d).', join( shx, ',' ), K, join( arr[ i ].shape, ',' ), i ) );\n\t\t}\n\t}\n\t// Verify that the input and output arrays have the same shape...\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tif ( shx[ i ] !== arr[ 1 ].shape[ i ] ) {\n\t\t\tthrow new Error( 'invalid arguments. Input and output arrays must have the same shape.' );\n\t\t}\n\t}\n\t// Resolve the loop dimensions and associated strides:\n\tldims = indicesComplement( shx.length, d );\n\ttmp = takeIndexed2( shx, x.strides, ldims );\n\tshl = tmp[ 0 ];\n\tslx = tmp[ 1 ];\n\n\tsly = takeIndexed( y.strides, ldims );\n\n\t// Resolve the core dimensions and associated strides:\n\ttmp = takeIndexed2( shx, x.strides, d );\n\tshc = tmp[ 0 ];\n\tscx = tmp[ 1 ];\n\n\tscy = takeIndexed( y.strides, d );\n\n\t// Verify that provided ancillary arrays have the same loop dimensions...\n\tlen = 1; // number of elements\n\tns = 0;  // number of singleton dimensions\n\tfor ( i = 0; i < K; i++ ) {\n\t\ts = shl[ i ];\n\t\tfor ( j = 2; j < N; j++ ) {\n\t\t\tif ( s !== arr[ j ].shape[ i ] ) {\n\t\t\t\tthrow new Error( format( 'invalid argument. Loop dimensions must be consistent across all provided arrays. Input array shape: [%s]. Loop dimension indices: [%s]. Loop dimensions: [%s]. Array shape: [%s] (index: %d).', join( shx, ',' ), join( ldims, ',' ), join( shl, ',' ), join( arr[ j ].shape, ',' ), j ) );\n\t\t\t}\n\t\t}\n\t\t// Note that, if one of the dimensions is `0`, the length will be `0`...\n\t\tlen *= s;\n\n\t\t// Check whether the current dimension is a singleton dimension...\n\t\tif ( s === 1 ) {\n\t\t\tns += 1;\n\t\t}\n\t}\n\t// Check whether we were provided empty ndarrays...\n\tif ( len === 0 || ( shc.length && numel( shc ) === 0 ) ) {\n\t\treturn;\n\t}\n\t// Initialize ndarray-like objects for representing sub-array views...\n\tviews = [\n\t\t{\n\t\t\t'dtype': x.dtype,\n\t\t\t'data': x.data,\n\t\t\t'shape': shc,\n\t\t\t'strides': scx,\n\t\t\t'offset': x.offset,\n\t\t\t'order': x.order\n\t\t},\n\t\t{\n\t\t\t'dtype': y.dtype,\n\t\t\t'data': y.data,\n\t\t\t'shape': shc,\n\t\t\t'strides': scy,\n\t\t\t'offset': y.offset,\n\t\t\t'order': y.order\n\t\t}\n\t];\n\tinitializeViews( arr, views );\n\n\t// Determine the strategy for marshaling data to and from sub-array views of the input and output arrays before and after performing an operation:\n\tstrategyX = strategy( views[ 0 ] );\n\tstrategyY = strategy( views[ 1 ] );\n\n\t// Determine whether we can avoid iteration altogether...\n\tif ( K === 0 ) {\n\t\treturn UNARY[ K ]( fcn, arr, strategyX, strategyY, opts );\n\t}\n\t// Determine whether we only have one loop dimension and can thus readily perform one-dimensional iteration...\n\tif ( K === 1 ) {\n\t\treturn UNARY[ K ]( fcn, arr, views, shl, slx, sly, strategyX, strategyY, opts ); // eslint-disable-line max-len\n\t}\n\t// Determine whether the loop dimensions have only **one** non-singleton dimension (e.g., shape=[10,1,1,1]) so that we can treat loop iteration as being equivalent to one-dimensional iteration...\n\tif ( ns === K-1 ) {\n\t\t// Get the index of the non-singleton dimension...\n\t\tfor ( i = 0; i < K; i++ ) {\n\t\t\tif ( shl[ i ] !== 1 ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tarr[ j ].strides = [ arr[j].strides[i] ];\n\t\t}\n\t\tslx = [ slx[i] ];\n\t\tsly = [ sly[i] ];\n\t\treturn UNARY[ 1 ]( fcn, arr, views, [ shl[i] ], slx, sly, strategyX, strategyY, opts ); // eslint-disable-line max-len\n\t}\n\tiox = iterationOrder( slx ); // +/-1\n\tioy = iterationOrder( sly ); // +/-1\n\n\t// Determine whether we can avoid blocked iteration...\n\tif ( iox !== 0 && ioy !== 0 && iox === ioy && K <= MAX_DIMS ) {\n\t\t// So long as iteration for each respective array always moves in the same direction (i.e., no mixed sign strides), we can leverage cache-optimal (i.e., normal) nested loops without resorting to blocked iteration...\n\t\treturn UNARY[ K ]( fcn, arr, views, shl, slx, sly, strategyX, strategyY, opts ); // eslint-disable-line max-len\n\t}\n\t// At this point, we're either dealing with non-contiguous n-dimensional arrays, high dimensional n-dimensional arrays, and/or arrays having differing memory layouts, so our only hope is that we can still perform blocked iteration...\n\n\t// Determine whether we can perform blocked iteration...\n\tif ( K <= MAX_DIMS ) {\n\t\treturn BLOCKED_UNARY[ K-2 ]( fcn, arr, views, shl, slx, sly, strategyX, strategyY, opts ); // eslint-disable-line max-len\n\t}\n\t// Fall-through to linear view iteration without regard for how data is stored in memory (i.e., take the slow path)...\n\tunarynd( fcn, arr, views, shl, slx, sly, strategyX, strategyY, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = unaryStrided1d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a one-dimensional strided array function to a list of specified dimensions in an input ndarray and assign results to a provided output ndarray.\n*\n* @module @stdlib/ndarray-base-unary-strided1d\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n* var unaryStrided1d = require( '@stdlib/ndarray-base-unary-strided1d' );\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 3 ],\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply strided function:\n* unaryStrided1d( wrapper, [ x, y, initial ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var getStride = require( '@stdlib/ndarray-base-stride' );\n* var getOffset = require( '@stdlib/ndarray-base-offset' );\n* var getData = require( '@stdlib/ndarray-base-data-buffer' );\n* var numelDimension = require( '@stdlib/ndarray-base-numel-dimension' );\n* var gcusum = require( '@stdlib/blas-ext-base-gcusum' ).ndarray;\n* var unaryStrided1d = require( '@stdlib/ndarray-base-unary-strided1d' );\n*\n* function wrapper( arrays ) {\n*     var x = arrays[ 0 ];\n*     var y = arrays[ 1 ];\n*     var s = arrays[ 2 ];\n*     return gcusum( numelDimension( x, 0 ), getData( s )[ getOffset( s ) ], getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an ndarray-like object for the initial sum:\n* var initial = {\n*     'dtype': 'float64',\n*     'data': new Float64Array( [ 0.0 ] ),\n*     'shape': [ 1, 3 ],\n*     'strides': [ 0, 0 ],\n*     'offset': 0,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create a function for applying a strided function:\n* var cusum = unaryStrided1d.factory( wrapper );\n* // returns <Function>\n*\n* // Apply strided function:\n* cusum( [ x, y, initial ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ 1.0, 3.0 ], [ 6.0, 10.0 ] ], [ [ 5.0, 11.0 ], [ 18.0, 26.0 ] ], [ [ 9.0, 19.0 ], [ 30.0, 42.0 ] ] ] ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_initialize_array_views", "__commonJSMin", "exports", "module", "initializeViews", "arrays", "out", "v", "i", "require_strategy", "__commonJSMin", "exports", "module", "iterationOrder", "minmaxViewBufferIndex", "ndarraylike2object", "assign", "ndarraylike2ndarray", "emptyLike", "identity", "x", "broadcast", "squeeze", "arr", "index", "sh", "sx", "reshape", "contiguous", "len", "iox", "xmmv", "ind", "copyToWorkspace", "workspace", "view", "copyFromWorkspace", "copy", "strategy", "ndims", "ns", "i", "require_increment_offsets", "__commonJSMin", "exports", "module", "incrementOffsets", "offsets", "inc", "i", "require_set_view_offsets", "__commonJSMin", "exports", "module", "setViewOffsets", "views", "offsets", "i", "require_offsets", "__commonJSMin", "exports", "module", "offsets", "arrays", "out", "i", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary2d", "fcn", "arrays", "views", "shape", "stridesX", "stridesY", "strategyX", "strategyY", "opts", "bsize", "dv0", "dv1", "ov1", "sh", "s0", "s1", "sv", "ov", "iv", "i0", "i1", "j0", "j1", "N", "x", "y", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary3d", "fcn", "arrays", "views", "shape", "stridesX", "stridesY", "strategyX", "strategyY", "opts", "bsize", "dv0", "dv1", "dv2", "ov1", "ov2", "sh", "s0", "s1", "s2", "sv", "ov", "iv", "i0", "i1", "i2", "j0", "j1", "j2", "N", "y", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary4d", "fcn", "arrays", "views", "shape", "stridesX", "stridesY", "strategyX", "strategyY", "opts", "bsize", "dv0", "dv1", "dv2", "dv3", "ov1", "ov2", "ov3", "sh", "s0", "s1", "s2", "s3", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "j0", "j1", "j2", "j3", "N", "x", "y", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary5d", "fcn", "arrays", "views", "shape", "stridesX", "stridesY", "strategyX", "strategyY", "opts", "bsize", "dv0", "dv1", "dv2", "dv3", "dv4", "ov1", "ov2", "ov3", "ov4", "sh", "s0", "s1", "s2", "s3", "s4", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "j0", "j1", "j2", "j3", "j4", "N", "x", "y", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary6d", "fcn", "arrays", "views", "shape", "stridesX", "stridesY", "strategyX", "strategyY", "opts", "bsize", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "ov1", "ov2", "ov3", "ov4", "ov5", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "j0", "j1", "j2", "j3", "j4", "j5", "N", "x", "y", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary7d", "fcn", "arrays", "views", "shape", "stridesX", "stridesY", "strategyX", "strategyY", "opts", "bsize", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "N", "x", "y", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary8d", "fcn", "arrays", "views", "shape", "stridesX", "stridesY", "strategyX", "strategyY", "opts", "bsize", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "N", "x", "y", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary9d", "fcn", "arrays", "views", "shape", "stridesX", "stridesY", "strategyX", "strategyY", "opts", "bsize", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "ov8", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "j8", "N", "x", "y", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary10d", "fcn", "arrays", "views", "shape", "stridesX", "stridesY", "strategyX", "strategyY", "opts", "bsize", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "dv9", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "ov8", "ov9", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "s9", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "j8", "j9", "N", "x", "y", "o", "k", "require_d", "__commonJSMin", "exports", "module", "unary0d", "fcn", "arrays", "strategyX", "strategyY", "opts", "require_d", "__commonJSMin", "exports", "module", "incrementOffsets", "setViewOffsets", "offsets", "unary1d", "fcn", "arrays", "views", "shape", "stridesX", "stridesY", "strategyX", "strategyY", "opts", "dv0", "S0", "iv", "i0", "y", "i", "require_d", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary2d", "fcn", "arrays", "views", "shape", "stridesX", "stridesY", "strategyX", "strategyY", "opts", "dv0", "dv1", "S0", "S1", "sv", "iv", "i0", "i1", "y", "i", "require_d", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary3d", "fcn", "arrays", "views", "shape", "stridesX", "stridesY", "strategyX", "strategyY", "opts", "dv0", "dv1", "dv2", "S0", "S1", "S2", "sv", "iv", "i0", "i1", "i2", "y", "i", "require_d", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary4d", "fcn", "arrays", "views", "shape", "stridesX", "stridesY", "strategyX", "strategyY", "opts", "dv0", "dv1", "dv2", "dv3", "S0", "S1", "S2", "S3", "sv", "iv", "i0", "i1", "i2", "i3", "y", "i", "require_d", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary5d", "fcn", "arrays", "views", "shape", "stridesX", "stridesY", "strategyX", "strategyY", "opts", "dv0", "dv1", "dv2", "dv3", "dv4", "S0", "S1", "S2", "S3", "S4", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "y", "i", "require_d", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary6d", "fcn", "arrays", "views", "shape", "stridesX", "stridesY", "strategyX", "strategyY", "opts", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "S0", "S1", "S2", "S3", "S4", "S5", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "y", "i", "require_d", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary7d", "fcn", "arrays", "views", "shape", "stridesX", "stridesY", "strategyX", "strategyY", "opts", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "y", "i", "require_d", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary8d", "fcn", "arrays", "views", "shape", "stridesX", "stridesY", "strategyX", "strategyY", "opts", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "y", "i", "require_d", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary9d", "fcn", "arrays", "views", "shape", "stridesX", "stridesY", "strategyX", "strategyY", "opts", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "y", "i", "require_d", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary10d", "fcn", "arrays", "views", "shape", "stridesX", "stridesY", "strategyX", "strategyY", "opts", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "dv9", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "y", "i", "require_nd", "__commonJSMin", "exports", "module", "numel", "vind2bind", "zeros", "setViewOffsets", "offsets", "MODE", "unarynd", "fcn", "arrays", "views", "shape", "stridesX", "stridesY", "strategyX", "strategyY", "opts", "len", "iv", "io", "N", "v", "y", "i", "require_main", "__commonJSMin", "exports", "module", "ndarray2object", "normalizeIndices", "indicesComplement", "takeIndexed2", "takeIndexed", "iterationOrder", "numel", "join", "format", "initializeViews", "strategy", "blockedunary2d", "blockedunary3d", "blockedunary4d", "blockedunary5d", "blockedunary6d", "blockedunary7d", "blockedunary8d", "blockedunary9d", "blockedunary10d", "unary0d", "unary1d", "unary2d", "unary3d", "unary4d", "unary5d", "unary6d", "unary7d", "unary8d", "unary9d", "unary10d", "unarynd", "UNARY", "BLOCKED_UNARY", "MAX_DIMS", "unaryStrided1d", "fcn", "arrays", "dims", "options", "strategyX", "strategyY", "views", "ndims", "ldims", "opts", "arr", "tmp", "len", "shl", "shc", "shx", "iox", "ioy", "scx", "scy", "slx", "sly", "ns", "d", "s", "N", "M", "K", "x", "y", "i", "j", "main"]
}
